Clust2<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==2&!is.na(romics_proteins$statistics$hclust_clusters)]
Universe<-rownames(romics_proteins$statistics)
Clust1<-sub(".*\\;","",Clust1)
Clust2<-sub(".*\\;","",Clust2)
Universe<-sub(".*\\;","",Universe)
Clust1_KEGG<-UniProt_KEGG_EASE(Clust1,Universe)
Clust2_KEGG<-UniProt_KEGG_EASE(Clust2,Universe)
Clust1_GO<-UniProt_GO_EASE(Clust1,Universe)
Clust2_GO<-UniProt_GO_EASE(Clust2,Universe)
Clust1_KEGG<-cbind(Cluster=rep("Cluster 1",nrow(Clust1_KEGG)),Clust1_KEGG)
Clust2_KEGG<-cbind(Cluster=rep("Cluster 2",nrow(Clust2_KEGG)),Clust2_KEGG)
Clust1_GO<-cbind(Cluster=rep("Cluster 1",nrow(Clust1_GO)),Clust1_GO)
Clust2_GO<-cbind(Cluster=rep("Cluster 2",nrow(Clust2_GO)),Clust2_GO)
Enrichments <- rbind(Clust1_GO,Clust2_GO,Clust1_KEGG,Clust2_KEGG)
Enrichments <- Enrichments[Enrichments$pval<0.1&Enrichments$fold_change>1,]
DT::datatable(Enrichments)
library("ggpubr")
#APOA1
singleVariablePlot(romics_proteins,variable ="P02647")+ggtitle(label = "APOA1")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 10, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P10909",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#APOA4
singleVariablePlot(romics_proteins,variable ="P06727")+ggtitle(label = "APOA4")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 5, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P06727",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#APOL1
singleVariablePlot(romics_proteins,variable ="O14791")+ggtitle(label = "APOL1")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 0, label =formatC(romics_proteins$statistics[grepl(paste0(".*","O14791",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#Complement C3
singleVariablePlot(romics_proteins,variable ="P01024")+ggtitle(label = "Complement C3")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 8, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P01024",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#Serum Amyloid A4
singleVariablePlot(romics_proteins,variable ="P35542")+ggtitle(label = "Serum Amyloid A4")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 8, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P35542",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#Fibrinogen alpha chain
singleVariablePlot(romics_proteins,variable ="P02671")+ggtitle(label = "Fibrinogen alpha chain")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 8, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P02671",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#Haptoglobin
singleVariablePlot(romics_proteins,variable ="P00738")+ggtitle(label = "Haptoglobin")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 10, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P00738",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#kininogen-1
singleVariablePlot(romics_proteins,variable ="P01042")+ggtitle(label = "kininogen-1")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 4, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P01042",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#Clusterin
singleVariablePlot(romics_proteins,variable ="P01042")+ggtitle(label = "Clusterin")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 4, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P01042",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#Clusterin
singleVariablePlot(romics_proteins,variable ="P10909")+ggtitle(label = "Clusterin")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 6, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P10909",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
HDL<-read.csv(file = "01_source_files/HDLProteomeList2020.csv")
GO_HDL<-data.frame( Uniprot_Accession=HDL$Acc...,Uniprot_ID=HDL$Abbrev.,GO_accession="34364",GO_description="high-density lipoprotein particle")
UniProtTable_GO<-rbind(UniProtTable_GO,GO_HDL)
Clust1_GO<-UniProt_GO_EASE(Clust1,Universe)
Clust2_GO<-UniProt_GO_EASE(Clust2,Universe)
Clust1_GO<-cbind(Cluster=rep("Cluster 1",nrow(Clust1_GO)),Clust1_GO)
Clust2_GO<-cbind(Cluster=rep("Cluster 2",nrow(Clust2_GO)),Clust2_GO)
Enrichments <- rbind(Clust1_GO,Clust2_GO,Clust1_KEGG,Clust2_KEGG)
Enrichments <- Enrichments[Enrichments$pval<0.1&Enrichments$fold_change>1,]
DT::datatable(Enrichments)
View(metadata)
romics_proteins<-romicsTrend(romics_proteins,factor = "surface_density",log_factor = TRUE,type = "linear",p = 0.05)
romicsTrendHeatmap(romics_proteins)
romicsTrendHeatmap<-function(romics_object,factor="main", log_factor = FALSE, ...){
trendArgs <- romics_object$steps[max(which(grepl("fun\\|romicsTrend",romics_object$steps)))]
if(!is.romics_object(romics_object) || missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(is.null(romics_object$statistics$best_fitted_trend)){print("The trend analysis was not perform on the romics_object selected, please run the trend analysis using the function romicsTrend()")}
if (grepl("factor=", trendArgs)) {
factor <- regmatches(trendArgs, regexec("factor='(.*?)'", trendArgs))[[1]][2]
}
if (grepl("log_factor=", trendArgs)) {
factorscale <- regmatches(trendArgs, regexec("factorscale='(.*?)'", trendArgs))[[1]][2]
}
if(missing(factor)){factor="main"}
if(!factor %in% c("main",romicsFactorNames(romics_object))){
warning("The selected factor is not in the list of factors of the romics_object")
warning(romicsFactorNames(romics_object))
}
if(factor=="main"){factor<-romics_object$main_factor}
data<-romics_object$data
trend<-romics_object$statistics$best_fitted_trend
#extract the factor from the metadata
f<-romics_object$metadata[romicsFactorNames(romics_object)==factor,]
options(warn=-1)
f<-as.numeric(f)
if(length(f)==1){if(is.na(f)){stop("The factor selected could not be converted to a list of numbers.")}}
options(warn=0)
data<-data[trend!="other_trend",]
trend<-trend[trend!="other_trend"]
data<-data[order(trend),order(f)]
trend<-trend[order(trend)]
rowCols <- trend
rowCols[rowCols=="linear_decreasing"]<-"#ff0066"
rowCols[rowCols=="linear_increasing"]<-"#0099ff"
rowCols[rowCols=="quadratic_concave"]<-"#ffcc00"
rowCols[rowCols=="quadratic_convex"]<-"#9900ff"
if (log_factor == TRUE) {
f <- log(f)
f <- sort(f)
} else {
f <- sort(f)
}
colnames(data)<-paste0(colnames(data),"(",round(f,3),")")
heatmap.2(as.matrix(data),
dendrogram='none',
Rowv = FALSE,
Colv = FALSE,
scale = "row",
trace = "none",
col=viridis(100),
breaks=seq(-2, 2, length.out=101),
RowSideColors=rowCols,
...
)
}
if (log_factor == TRUE) {
f <- log(f)
f <- sort(f)
} else {
f <- sort(f)
}
colnames(data)<-paste0(colnames(data),"(",round(f,6),")")
romicsTrendHeatmap(romics_proteins)
romics_object<-romics_proteins
factor="surface_density"
log_factor = TRUE
trendArgs <- romics_object$steps[max(which(grepl("fun\\|romicsTrend",romics_object$steps)))]
if(!is.romics_object(romics_object) || missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(is.null(romics_object$statistics$best_fitted_trend)){print("The trend analysis was not perform on the romics_object selected, please run the trend analysis using the function romicsTrend()")}
if (grepl("factor=", trendArgs)) {
factor <- regmatches(trendArgs, regexec("factor='(.*?)'", trendArgs))[[1]][2]
}
if (grepl("log_factor=", trendArgs)) {
factorscale <- regmatches(trendArgs, regexec("factorscale='(.*?)'", trendArgs))[[1]][2]
}
if(missing(factor)){factor="main"}
if(!factor %in% c("main",romicsFactorNames(romics_object))){
warning("The selected factor is not in the list of factors of the romics_object")
warning(romicsFactorNames(romics_object))
}
if(factor=="main"){factor<-romics_object$main_factor}
data<-romics_object$data
View(data)
trend<-romics_object$statistics$best_fitted_trend
#extract the factor from the metadata
f<-romics_object$metadata[romicsFactorNames(romics_object)==factor,]
options(warn=-1)
f<-as.numeric(f)
if(length(f)==1){if(is.na(f)){stop("The factor selected could not be converted to a list of numbers.")}}
options(warn=0)
data<-data[trend!="other_trend",]
trend<-trend[trend!="other_trend"]
f
data<-data[order(trend),order(f)]
trend<-trend[order(trend)]
rowCols <- trend
rowCols[rowCols=="linear_decreasing"]<-"#ff0066"
rowCols[rowCols=="linear_increasing"]<-"#0099ff"
rowCols[rowCols=="quadratic_concave"]<-"#ffcc00"
rowCols[rowCols=="quadratic_convex"]<-"#9900ff"
if (log_factor == TRUE) {
f <- log(f)
f <- sort(f)
} else {
f <- sort(f)
}
f
romicsTrendHeatmap(romics_proteins,log_factor = TRUE)
linear_increasing<-gsub("\\;.*","",rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_increasing"])
linear_decreasing<-gsub("\\;.*","",rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_decreasing"])
linear_increasing<-gsub("\\;.*","",rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_increasing"])
linear_decreasing<-gsub("\\;.*","",rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_decreasing"])
linear_increasing<-gsub("\\;.*","",rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_increasing"])
linear_decreasing<-gsub("\\;.*","",rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_decreasing"])
universe<-gsub("\\;.*","",rownames(romics_proteins$statistics))
linear_increasing_KEGG<-UniProt_KEGG_EASE(linear_increasing,Universe)
linear_increasing<-gsub("\\;.*","",rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_increasing"])
linear_decreasing<-gsub("\\;.*","",rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_decreasing"])
universe<-gsub("\\;.*","",rownames(romics_proteins$statistics))
linear_increasing<-gsub("\\;.*","",rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_increasing"])
linear_decreasing<-gsub("\\;.*","",rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_decreasing"])
universe<-gsub("\\;.*","",rownames(romics_proteins$statistics))
linear_increasing_KEGG<-UniProt_KEGG_EASE(linear_increasing,universe)
linear_decreasing_KEGG<-UniProt_KEGG_EASE(linear_decreasing,universe)
linear_increasing_GO<-UniProt_GO_EASE(linear_increasing,universe)
linear_decreasing_GO<-UniProt_GO_EASE(linear_decreasing,universe)
linear_increasing_KEGG<-cbind(Cluster=rep("linear_increasing_KEGG",nrow(linear_increasing_KEGG)),linear_increasing_KEGG)
linear_decreasing_KEGG<-cbind(Cluster=rep("linear_decreasing_KEGG",nrow(linear_decreasing_KEGG)),linear_decreasing_KEGG)
linear_increasing_GO<-cbind(Cluster=rep("linear_increasing_GO",nrow(linear_increasing_GO)),linear_increasing_GO)
linear_decreasing_GO<-cbind(Cluster=rep("linear_decreasing_GO",nrow(linear_decreasing_GO)),linear_decreasing_GO)
Enrichments_trends <- rbind(linear_increasing_GO,linear_decreasing_GO,linear_increasing_KEGG,linear_decreasing_KEGG)
Enrichments_trends <- Enrichments_trends[Enrichments_trends$pval<0.1&Enrichments_trends$fold_change>1,]
DT::datatable(Enrichments_trends)
singleVariableTrend(romics_proteins,"P01116",title = "GTPase KRas")
singleVariableTrend(romics_proteins,"P01116",title = "GTPase KRas",log_factor = T)
singleVariableTrend(romics_proteins,"P01116",title = "GTPase KRas",log_factor = T)
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/05 - Lungmap/08 - IPF  Kaminski/01_Proteomics_Label_free/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2021_03_23.fasta")){
download_UniProtFasta(proteomeID = "UP000005640",reviewed = F,export = TRUE, file="./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2021_03_23.fasta")
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2021_03_23.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
}
if(file.exists("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2020_07_29.csv")){
UniProtTable<-read.csv("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2020_07_29.csv")
}else{
download_UniProtTable(proteomeID = "UP000005640",reviewed = F)
write.csv(UniProtTable,("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2020_07_29.csv"),row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="./03_output_files/UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="./03_output_files/UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="./03_output_files/UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="./03_output_files/UniProtTable_KEGG.csv",row.names=FALSE)
}
data<-extractMaxQuant("./01_source_files/proteinGroups.txt",quantification_type = "LFQ",cont.rm = T,site.rm = T,rev.rm = T)
IDsdetails<-extractMaxQuantIDs("./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
IDsdetails<-cbind(UniProt_Name=sub(".*\\|","",IDsdetails$protein.ids), IDsdetails)
colnames(data)<- sub("LFQ.intensity.","p",colnames(data))
metadata<- read.csv(file = "./01_source_files/metadata.csv")
colnames(metadata)<-tolower(colnames(metadata))
colnames(metadata)<-sub("x", "",colnames(metadata))
write.csv(IDsdetails,"MaxQuantIDS.csv")
surface_density<-as.numeric(metadata[6,-1])
hist(surface_density,breaks = 8)
t<-shapiro.test(surface_density)
print(paste0("The surface density normality Shapiro-Wilk p=",t$p.value))
percent_tissue<-as.numeric(metadata[7,-1])
hist(percent_tissue,breaks = 8)
t<-shapiro.test(percent_tissue)
print(paste0("The surface density normality Shapiro-Wilk p=",t$p.value))
log_surface_density<-log(surface_density)
hist(log_surface_density,breaks = 8)
t<-shapiro.test(log_surface_density)
print(paste0("The surface density normality Shapiro-Wilk p=",t$p.value))
metadata<-rbind(metadata,c("log_surface_density",log_surface_density))
romics_proteins<- romicsCreateObject(data, metadata,main_factor = "disease_status")
romics_proteins<- romicsZeroToMissing(romics_proteins)
romicsPlotMissing(romics_proteins)
romics_proteins<-romicsFilterMissing(romics_proteins, percentage_completeness = 70)
print(paste0(nrow(romics_proteins$data),"/", nrow(romics_proteins$original_data)," proteins remained after filtering", " (",round(nrow(romics_proteins$data)/nrow(romics_proteins$original_data)*100,2),"%)."))
romicsPlotMissing(romics_proteins)
romics_proteins<-log2transform(romics_proteins)
romics_proteins<-medianCenterSample(romics_proteins)
distribBoxplot(romics_proteins)
romicsHclust(romics_proteins)
imputeMissingEval(romics_proteins,nb_stdev = 2,width_stdev = 0.5, bin=1)
romics_proteins<-imputeMissing(romics_proteins,nb_stdev = 2,width_stdev = 0.5)
PCA_proteins<-romicsPCA(romics_proteins)
indPCAplot(romics_proteins, plotType = "percentage")
indPCAplot(romics_proteins, plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_proteins,  plotType = "individual",Xcomp=1,Ycomp =3)
indPCA3D(romics_proteins)
fviz_nbclust(t(romics_proteins$data), kmeans, method = "silhouette", k.max = 10) + theme_bw() + ggtitle("The Silhouette Plot")
fviz_nbclust(t(romics_proteins$data), kmeans, method = "wss")+
geom_vline(xintercept = 3, linetype = 2)
library(cluster)
gap_stat <- clusGap(t(romics_proteins$data), FUN = kmeans, nstart = 25,
K.max = 10, B = 10)
print(gap_stat, method = "firstmax")
fviz_gap_stat(gap_stat)
set.seed(seed = 1)
k<-kmeans(t(romics_proteins$data),2,iter.max = 10)
print("the clusters were the following")
print(k$cluster)
print("Those were used to color the PCA plot")
PC_coord<-data.frame(PCA_proteins$ind$coord[,1:2])
PC_coord<-cbind(PC_coord,k=as.character(k$cluster))
ggplot(PC_coord, aes(x=Dim.1,y=Dim.2,color=k)) +
geom_point(size = 4)+
ggtitle("Principal Component Analysis (2 clusters)")+
scale_color_manual(values=c("dodgerblue", "orangered"))+
xlab(paste0("PC1(",round(as.numeric(PCA_proteins$eig[1,2]),2),"%)"))+
ylab(paste0("PC2(",round(as.numeric(PCA_proteins$eig[2,2]),2),"%)"))+
theme_bw()
#get the sample names for the samples in each cluster
Clust1 <-names(k$cluster[k$cluster==1])
Clust2 <-names(k$cluster[k$cluster==2])
#obtain the surface density of the clusters 1 and 2
Surf1 <- as.numeric(metadata[8,colnames(metadata) %in% Clust1])
Surf2 <- as.numeric(metadata[8,colnames(metadata) %in% Clust2])
t<-wilcox.test(Surf1,Surf2)
print(paste0("The t.test pvalue between Clust 1 and 2 is ",t$p.value))
Surf1 <- data.frame(values=Surf1,clust="1")
Surf2 <- data.frame(values=Surf2,clust="2")
Surf <- rbind(Surf1,Surf2)
ggplot(Surf, aes(x=clust, y=values,color=clust,fill=clust))+
geom_boxplot(width=0.4)+
geom_jitter(shape=16,size=4)+
scale_color_manual(values=c("dodgerblue", "orangered"))+
scale_fill_manual(values=alpha(c("dodgerblue", "orangered"), .3))+
theme_bw()
#get the sample names for the samples in each cluster
Clust1 <-names(k$cluster[k$cluster==1])
Clust2 <-names(k$cluster[k$cluster==2])
#obtain the surface density of the clusters 1 and 2
Perc1 <- as.numeric(metadata[7,colnames(metadata) %in% Clust1])
Perc2 <- as.numeric(metadata[7,colnames(metadata) %in% Clust2])
t<-wilcox.test(Perc1,Perc2)
print(paste0("The wilcox.test pvalue between Clust 1 and 2 is ",t$p.value))
Perc1 <- data.frame(values=Perc1,clust="1")
Perc2 <- data.frame(values=Perc2,clust="2")
Perc<- rbind(Perc1,Perc2)
ggplot(Perc, aes(x=clust, y=values,color=clust,fill=clust))+
geom_boxplot(width=0.4)+
geom_jitter(shape=16,size=4)+
scale_color_manual(values=c("dodgerblue", "orangered"))+
scale_fill_manual(values=alpha(c("dodgerblue", "orangered"), .3))+
theme_bw()
k<-kmeans(t(romics_proteins$data),3)
print("the clusters were the following")
print(k$cluster)
print("Those were used to color the PCA plot")
PC_coord<-data.frame(PCA_proteins$ind$coord[,1:2])
PC_coord<-cbind(PC_coord,k=as.character(k$cluster))
ggplot(PC_coord, aes(x=Dim.1,y=Dim.2,color=k)) +
geom_point(size = 4,colours=c("yellow","blue","orange"))+
ggtitle("Principal Component Analysis (3 clusters)")+
scale_color_manual(values=c("dodgerblue", "orangered", "gray50"))+
xlab(paste0("PC1(",round(as.numeric(PCA_proteins$eig[1,2]),2),"%)"))+
ylab(paste0("PC2(",round(as.numeric(PCA_proteins$eig[2,2]),2),"%)"))+
theme_bw()
#get the sample names for the samples in each cluster
Clust1 <-names(k$cluster[k$cluster==1])
Clust2 <-names(k$cluster[k$cluster==2])
Clust3 <-names(k$cluster[k$cluster==3])
#obtain the surface density of the clusters 1 and 2
Surf1 <- as.numeric(metadata[8,colnames(metadata) %in% Clust1])
Surf2 <- as.numeric(metadata[8,colnames(metadata) %in% Clust2])
Surf3 <- as.numeric(metadata[8,colnames(metadata) %in% Clust3])
t1_2<-wilcox.test(Surf1,Surf2)
print(paste0("The wilcox.test pvalue between Clust 1 and 2 is ",t1_2$p.value))
t2_3<-wilcox.test(Surf2,Surf3)
print(paste0("The wilcox.test pvalue between Clust 2 and 3 is ",t2_3$p.value))
t1_3<-wilcox.test(Surf1,Surf3)
print(paste0("The wilcox.test pvalue between Clust 1 and 3 is ",t1_3$p.value))
Surf1 <- data.frame(values=Surf1,clust="1")
Surf2 <- data.frame(values=Surf2,clust="2")
Surf3 <- data.frame(values=Surf3,clust="3")
Surf <- rbind(Surf1,Surf2,Surf3)
ggplot(Surf, aes(x=clust, y=values,color=clust,fill=clust))+
geom_boxplot(width=0.4)+
geom_jitter(shape=16,size=4)+
scale_color_manual(values=c("dodgerblue", "orangered","gray50"))+
scale_fill_manual(values=alpha(c("dodgerblue", "orangered","gray50"), .3))+
theme_bw()
#get the sample names for the samples in each cluster
Clust1 <-names(k$cluster[k$cluster==1])
Clust2 <-names(k$cluster[k$cluster==2])
Clust3 <-names(k$cluster[k$cluster==3])
#obtain the surface density of the clusters 1 and 2
Perc1 <- as.numeric(metadata[7,colnames(metadata) %in% Clust1])
Perc2 <- as.numeric(metadata[7,colnames(metadata) %in% Clust2])
Perc3 <- as.numeric(metadata[7,colnames(metadata) %in% Clust3])
t1_2<-wilcox.test(Perc1,Perc2)
print(paste0("The wilcox.test pvalue between Clust 1 and 2 is ",t1_2$p.value))
t2_3<-wilcox.test(Perc2,Perc3)
print(paste0("The wilcox.test pvalue between Clust 2 and 3 is ",t2_3$p.value))
t1_3<-wilcox.test(Perc1,Perc3)
print(paste0("The wilcox.test pvalue between Clust 1 and 3 is ",t1_3$p.value))
Perc1 <- data.frame(values=Perc1,clust="1")
Perc2 <- data.frame(values=Perc2,clust="2")
Perc3 <- data.frame(values=Perc3,clust="3")
Perc <- rbind(Perc1,Perc2,Perc3)
ggplot(Perc, aes(x=clust, y=values,color=clust,fill=clust))+
geom_boxplot(width=0.4)+
geom_jitter(shape=16,size=4)+
scale_color_manual(values=c("dodgerblue", "orangered","gray50"))+
scale_fill_manual(values=alpha(c("dodgerblue", "orangered","gray50"), .3))+
theme_bw()
metadata<-data.frame(t(romics_proteins$metadata))
PC_coord<-data.frame(PCA_proteins$ind$coord[,1:2])
PC_coord<-cbind(PC_coord,log_surface_density=as.numeric(metadata$log_surface_density),percent_tissue=metadata$percent_tissue)
for (i in 1:4){PC_coord[,i]<-as.numeric(PC_coord[,i])}
library("viridis")
ggplot(PC_coord, aes(x=Dim.1,y=Dim.2,color=log_surface_density)) +
geom_point(size = 4)+scale_color_gradient(low="blue", high="red")+
geom_text(label=round(PC_coord$log_surface_density,3),position = position_nudge(x = 7))+
ggtitle("Principal Component Analysis (Surface density)") +
xlab(paste0("PC1(",round(as.numeric(PCA_proteins$eig[1,2]),2),"%)"))+
ylab(paste0("PC2(",round(as.numeric(PCA_proteins$eig[2,2]),2),"%)"))+
theme_bw()+ scale_colour_viridis()
ggplot(PC_coord, aes(x=Dim.1,y=Dim.2,color=percent_tissue)) +
geom_point(size = 4)+scale_color_gradient(low="blue", high="red")+
geom_text(label=round(PC_coord$percent_tissue,3),position = position_nudge(x = 7))+
ggtitle("Principal Component Analysis (Percent_tissue)") +
xlab(paste0("PC1(",round(as.numeric(PCA_proteins$eig[1,2]),2),"%)"))+
ylab(paste0("PC2(",round(as.numeric(PCA_proteins$eig[2,2]),2),"%)"))+
theme_bw()+ scale_colour_viridis()
romics_proteins<-romicsMean(romics_proteins)
romics_proteins<-romicsSd(romics_proteins)
romics_proteins<-romicsANOVA(romics_proteins)
print(paste0(sum(romics_proteins$statistics$ANOVA_p<0.05), " proteins had an ANOVA p<0.05."))
pval<-data.frame(ids=rownames(romics_proteins$statistics), p=romics_proteins$statistics$ANOVA_p)
ggplot(pval, aes(p)) + geom_histogram(binwidth = 0.01)+theme_ROP()+ggtitle("ANOVA p frequency plot")+geom_vline(xintercept=0.05,linetype="dashed", color = "red")
print(paste0(sum(romics_proteins$statistics$ANOVA_padj<0.05), " proteins had an ANOVA padjusted<0.05."))
pval<-data.frame(ids=rownames(romics_proteins$statistics), p=romics_proteins$statistics$ANOVA_padj)
ggplot(pval, aes(p)) + geom_histogram(binwidth = 0.01)+theme_ROP()+ggtitle("ANOVA padj frequency plot")+geom_vline(xintercept=0.05,linetype="dashed", color = "red")
romicsHeatmap(romics_proteins,variable_hclust_number = 2,ANOVA_filter = "padj", p=0.05)
romics_proteins<-romicsVariableHclust(romics_proteins,clusters = 2,ANOVA_filter = "padj",p= 0.05,plot = F)
romics_proteins<-romicsZscores(romics_proteins)
Clust1<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==1&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust2<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==2&!is.na(romics_proteins$statistics$hclust_clusters)]
Universe<-rownames(romics_proteins$statistics)
Clust1<-sub(".*\\;","",Clust1)
Clust2<-sub(".*\\;","",Clust2)
Universe<-sub(".*\\;","",Universe)
Clust1_KEGG<-UniProt_KEGG_EASE(Clust1,Universe)
Clust2_KEGG<-UniProt_KEGG_EASE(Clust2,Universe)
Clust1_GO<-UniProt_GO_EASE(Clust1,Universe)
Clust2_GO<-UniProt_GO_EASE(Clust2,Universe)
Clust1_KEGG<-cbind(Cluster=rep("Cluster 1",nrow(Clust1_KEGG)),Clust1_KEGG)
Clust2_KEGG<-cbind(Cluster=rep("Cluster 2",nrow(Clust2_KEGG)),Clust2_KEGG)
Clust1_GO<-cbind(Cluster=rep("Cluster 1",nrow(Clust1_GO)),Clust1_GO)
Clust2_GO<-cbind(Cluster=rep("Cluster 2",nrow(Clust2_GO)),Clust2_GO)
Enrichments <- rbind(Clust1_GO,Clust2_GO,Clust1_KEGG,Clust2_KEGG)
Enrichments <- Enrichments[Enrichments$pval<0.1&Enrichments$fold_change>1,]
DT::datatable(Enrichments)
library("ggpubr")
#APOA1
singleVariablePlot(romics_proteins,variable ="P02647")+ggtitle(label = "APOA1")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 10, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P10909",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#APOA4
singleVariablePlot(romics_proteins,variable ="P06727")+ggtitle(label = "APOA4")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 5, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P06727",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#APOL1
singleVariablePlot(romics_proteins,variable ="O14791")+ggtitle(label = "APOL1")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 0, label =formatC(romics_proteins$statistics[grepl(paste0(".*","O14791",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#Complement C3
singleVariablePlot(romics_proteins,variable ="P01024")+ggtitle(label = "Complement C3")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 8, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P01024",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#Serum Amyloid A4
singleVariablePlot(romics_proteins,variable ="P35542")+ggtitle(label = "Serum Amyloid A4")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 8, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P35542",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#Fibrinogen alpha chain
singleVariablePlot(romics_proteins,variable ="P02671")+ggtitle(label = "Fibrinogen alpha chain")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 8, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P02671",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#Haptoglobin
singleVariablePlot(romics_proteins,variable ="P00738")+ggtitle(label = "Haptoglobin")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 10, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P00738",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#kininogen-1
singleVariablePlot(romics_proteins,variable ="P01042")+ggtitle(label = "kininogen-1")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 4, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P01042",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#Clusterin
singleVariablePlot(romics_proteins,variable ="P01042")+ggtitle(label = "Clusterin")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 4, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P01042",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
#Clusterin
singleVariablePlot(romics_proteins,variable ="P10909")+ggtitle(label = "Clusterin")+
geom_bracket(xmin = "DONOR", xmax = "IPF", y.position = 6, label =formatC(romics_proteins$statistics[grepl(paste0(".*","P10909",".*"),rownames(romics_proteins$statistics)),colnames(romics_proteins$statistics)=="ANOVA_padj"], format = "e"))
HDL<-read.csv(file = "01_source_files/HDLProteomeList2020.csv")
GO_HDL<-data.frame( Uniprot_Accession=HDL$Acc...,Uniprot_ID=HDL$Abbrev.,GO_accession="34364",GO_description="high-density lipoprotein particle")
UniProtTable_GO<-rbind(UniProtTable_GO,GO_HDL)
Clust1_GO<-UniProt_GO_EASE(Clust1,Universe)
Clust2_GO<-UniProt_GO_EASE(Clust2,Universe)
Clust1_GO<-cbind(Cluster=rep("Cluster 1",nrow(Clust1_GO)),Clust1_GO)
Clust2_GO<-cbind(Cluster=rep("Cluster 2",nrow(Clust2_GO)),Clust2_GO)
Enrichments <- rbind(Clust1_GO,Clust2_GO,Clust1_KEGG,Clust2_KEGG)
Enrichments <- Enrichments[Enrichments$pval<0.1&Enrichments$fold_change>1,]
DT::datatable(Enrichments)
romics_proteins<-romicsTrend(romics_proteins,factor = "surface_density",log_factor = FALSE,type = "linear",p = 0.05)
romicsTrendHeatmap(romics_proteins,log_factor = FALSE)
linear_increasing<-gsub("\\;.*","",rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_increasing"])
linear_decreasing<-gsub("\\;.*","",rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_decreasing"])
universe<-gsub("\\;.*","",rownames(romics_proteins$statistics))
linear_increasing_KEGG<-UniProt_KEGG_EASE(linear_increasing,universe)
linear_decreasing_KEGG<-UniProt_KEGG_EASE(linear_decreasing,universe)
linear_increasing_GO<-UniProt_GO_EASE(linear_increasing,universe)
linear_decreasing_GO<-UniProt_GO_EASE(linear_decreasing,universe)
linear_increasing_KEGG<-cbind(Cluster=rep("linear_increasing_KEGG",nrow(linear_increasing_KEGG)),linear_increasing_KEGG)
linear_decreasing_KEGG<-cbind(Cluster=rep("linear_decreasing_KEGG",nrow(linear_decreasing_KEGG)),linear_decreasing_KEGG)
linear_increasing_GO<-cbind(Cluster=rep("linear_increasing_GO",nrow(linear_increasing_GO)),linear_increasing_GO)
linear_decreasing_GO<-cbind(Cluster=rep("linear_decreasing_GO",nrow(linear_decreasing_GO)),linear_decreasing_GO)
Enrichments_trends <- rbind(linear_increasing_GO,linear_decreasing_GO,linear_increasing_KEGG,linear_decreasing_KEGG)
Enrichments_trends <- Enrichments_trends[Enrichments_trends$pval<0.1&Enrichments_trends$fold_change>1,]
DT::datatable(Enrichments_trends)
write.table(Enrichments_trends,"./03_output_files/Enrichment_trends")
singleVariableTrend(romics_proteins,"P01116",title = "GTPase KRas",log_factor = T)
singleVariableTrend(romics_proteins,"P01116",title = "GTPase KRas",log_factor = F)
results<-merge(IDsdetails,results,by.x = "UniProt_Name", by.y=0)
results<-romicsExportData(romics_proteins,statistics = T,missing_data = T)
results<-merge(IDsdetails,results,by.x = "UniProt_Name", by.y=0)
write.csv(results, "./03_output_files/IPF_complete_analysis.csv")
representativeIDs<- gsub("\\;.*","",results$majority.protein.ids)
representativeIDs
representativeIDs<- data.frame(representative_ID=t(gsub("\\;.*","",results$majority.protein.ids)))
representativeIDs
representativeIDs<- data.frame(representative_ID=t(gsub("\\;.*","",results$majority.protein.ids)))
representativeIDs
representativeIDs<- data.frame(representative_ID=(gsub("\\;.*","",results$majority.protein.ids))
representativeIDs<- data.frame(representative_ID=gsub("\\;.*","",results$majority.protein.ids))
representativeIDs
representativeIDs<- merge(t(representativeIDs),UniProtTable_GO,by.x="representative_ID",by.y="Uniprot_Accession")
results<-romicsExportData(romics_proteins,statistics = T,missing_data = T)
results<-merge(IDsdetails,results,by.x = "UniProt_Name", by.y=0)
representativeIDs<- data.frame(Uniprot_Accession=gsub("\\;.*","",results$majority.protein.ids))
representativeIDs<- merge(representativeIDs,UniProtTable_GO,by="Uniprot_Accession")
View(representativeIDs)
results<-romicsExportData(romics_proteins,statistics = T,missing_data = T)
results<-merge(IDsdetails,results,by.x = "UniProt_Name", by.y=0)
representativeIDs<- data.frame(Uniprot_Accession=gsub("\\;.*","",results$majority.protein.ids))
representativeIDs<- merge(representativeIDs,UniProtTable,by="Uniprot_Accession")
View(UniProtTable)
View(representativeIDs)
results<-cbind(representativeIDs,results)
View(results)
