}
colnames(data)
data<-data.frame(extractMaxQuant("./01_source_files/proteinGroups.txt",quantification_type = "LFQ",cont.rm = T,site.rm = T,rev.rm = T))
colnames(data)<-gsub("X","d",colnames(data))
IDsdetails<-extractMaxQuantIDs("./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
metadata<- read.csv(file = "./01_source_files/metadata_biops.csv")
write.csv(extractMaxQuantIDs("./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T),"./03_output_files/MaxQuantIDS.csv")
romics_proteins<- romicsCreateObject(data,metadata,main_factor = "Disease_localization")
romics_proteins<- romicsZeroToMissing(romics_proteins)
romicsPlotMissing(romics_proteins)
devtools::install()
devtools::install()
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https:/cloud.r-project.org/")))
setwd("~/Documents/30 - CoV URMC/01_biopsies/01_proteomics/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("./03_output_files/Uniprot_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.fasta")){
download_UniProtFasta(proteomeID = "UP000005640",reviewed = T,export = TRUE, file="./03_output_files/Uniprot_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.fasta")
}
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
if(file.exists("./03_output_files/UniprotTable_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.csv")){
UniProtTable<-read.csv("./03_output_files/UniprotTable_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.csv")
}else{
download_UniProtTable(proteomeID = "UP000005640",reviewed = T)
write.csv(UniProtTable,("./03_output_files/UniprotTable_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.csv"),row.names=FALSE)
}
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https:/cloud.r-project.org/")))
setwd("~/Documents/30 - CoV URMC/01_biopsies/01_proteomics/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("./03_output_files/Uniprot_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.fasta")){
download_UniProtFasta(proteomeID = "UP000005640",reviewed = T,export = TRUE, file="./03_output_files/Uniprot_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.fasta")
}
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
if(file.exists("./03_output_files/UniprotTable_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.csv")){
UniProtTable<-read.csv("./03_output_files/UniprotTable_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.csv")
}else{
download_UniProtTable(proteomeID = "UP000005640",reviewed = T)
write.csv(UniProtTable,("./03_output_files/UniprotTable_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.csv"),row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="./03_output_files/UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="./03_output_files/UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="./03_output_files/UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="./03_output_files/UniProtTable_KEGG.csv",row.names=FALSE)
}
colnames(data)
data<-data.frame(extractMaxQuant("./01_source_files/proteinGroups.txt",quantification_type = "LFQ",cont.rm = T,site.rm = T,rev.rm = T))
colnames(data)<-gsub("X","d",colnames(data))
IDsdetails<-extractMaxQuantIDs("./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
metadata<- read.csv(file = "./01_source_files/metadata_biops.csv")
write.csv(extractMaxQuantIDs("./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T),"./03_output_files/MaxQuantIDS.csv")
romics_proteins<- romicsCreateObject(data,metadata,main_factor = "Disease_localization")
romics_proteins<- romicsZeroToMissing(romics_proteins)
exists(romics_object$steps)
exists(romics_proteins$steps)
exists("romics_proteins$steps")
romics_proteins$steps
exists(romics_object$steps)
exists(romics_proteins$steps)
exists("romics_proteins$steps")
exists(romics_proteins)
exists("romics_proteins")
exists("romics_proteins$steps")
exists("romics_proteins$Steps")
exists("romics_proteins$steps")
romicsUpdateSteps<-function(romics_object, arguments){
if(missing(arguments)){
steps<- c(paste0("date|",gsub(" ","_",format(Sys.time(),"%b_%d_%Y_%X")),"|step_not_recorded"), "note|The arguments of the function were not recorded using arguments<-as.list(match.call())")
}
funName<-arguments[[1]]
argumentsNames<-names(arguments)[2:length(arguments)]
#if(!exists(romics_object$steps)){stop(paste0("The function ",funName," was run on an object that was not an romics_object"))}
steps<- c(paste0("date|",gsub(" ","_",format(Sys.time(),"%b_%d_%Y_%X")),"|",funName))
fun<-paste0(funName,"(")
for(i in 1:length(argumentsNames)){
fun<-paste0(fun,argumentsNames[i],"=")
if(typeof(arguments[[i+1]])=="language"){
arguments[[i+1]]<-gsub("\"","'",deparse(arguments[[i+1]]))
fun<-paste0(fun,unlist(arguments[[i+1]]))
}else{
if(typeof(arguments[[i+1]])=="character"){
fun<-paste0(fun,"'",unlist(arguments[[i+1]]),"'")
}else{
fun<-paste0(fun,unlist(arguments[[i+1]]))
}}
if(i<length(argumentsNames)){fun<-paste0(fun,",")}
}
fun<-paste0("fun|",fun,")")
steps<- c(steps,fun)
romics_object$steps<-c(romics_object$steps,steps)
return(romics_object)
}
romics_proteins<- romicsZeroToMissing(romics_proteins)
romics_proteins<- romicsZeroToMissing(romics_proteins)
romicsUpdateSteps<-function(romics_object, arguments){
if(missing(arguments)){
steps<- c(paste0("date|",gsub(" ","_",format(Sys.time(),"%b_%d_%Y_%X")),"|step_not_recorded"), "note|The arguments of the function were not recorded using arguments<-as.list(match.call())")
}
funName<-arguments[[1]]
argumentsNames<-names(arguments)[2:length(arguments)]
#if(!exists(romics_object$steps)){stop(paste0("The function ",funName," was run on an object that was not an romics_object"))}
steps<- c(paste0("date|",gsub(" ","_",format(Sys.time(),"%b_%d_%Y_%X")),"|",funName))
fun<-paste0(funName,"(")
for(i in 1:length(argumentsNames)){
fun<-paste0(fun,argumentsNames[i],"=")
if(typeof(arguments[[i+1]])=="language"){
arguments[[i+1]]<-gsub("\"","'",deparse(arguments[[i+1]]))
fun<-paste0(fun,unlist(arguments[[i+1]]))
}else{
if(typeof(arguments[[i+1]])=="character"){
fun<-paste0(fun,"'",unlist(arguments[[i+1]]),"'")
}else{
fun<-paste0(fun,unlist(arguments[[i+1]]))
}}
if(i<length(argumentsNames)){fun<-paste0(fun,",")}
}
fun<-paste0("fun|",fun,")")
steps<- c(steps,fun)
romics_object$steps<-c(romics_object$steps,steps)
return(romics_object)
}
romics_proteins<- romicsZeroToMissing(romics_proteins)
devtools::install()
library("RomicsProcessor")
if(!file.exists("./03_output_files/Uniprot_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.fasta")){
download_UniProtFasta(proteomeID = "UP000005640",reviewed = T,export = TRUE, file="./03_output_files/Uniprot_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.fasta")
}
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
romics_proteins<- romicsCreateObject(data,metadata,main_factor = "Disease_localization")
romics_proteins<- romicsZeroToMissing(romics_proteins)
romicsPlotMissing(romics_proteins)
romics_proteins<-romicsFilterMissing(romics_proteins,percentage_completeness = 50)
print(paste0(nrow(romics_proteins$data),"/", nrow(romics_proteins$original_data)," proteins remained after filtering", " (",round(nrow(romics_proteins$data)/nrow(romics_proteins$original_data)*100,2),"%)."))
romicsPlotMissing(romics_proteins)
romics_proteins<-log2transform(romics_proteins)
distribBoxplot(romics_proteins)
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https:/cloud.r-project.org/")))
setwd("~/Documents/30 - CoV URMC/01_biopsies/01_proteomics/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("./03_output_files/Uniprot_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.fasta")){
download_UniProtFasta(proteomeID = "UP000005640",reviewed = T,export = TRUE, file="./03_output_files/Uniprot_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.fasta")
}
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
if(file.exists("./03_output_files/UniprotTable_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.csv")){
UniProtTable<-read.csv("./03_output_files/UniprotTable_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.csv")
}else{
download_UniProtTable(proteomeID = "UP000005640",reviewed = T)
write.csv(UniProtTable,("./03_output_files/UniprotTable_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.csv"),row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="./03_output_files/UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="./03_output_files/UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="./03_output_files/UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="./03_output_files/UniProtTable_KEGG.csv",row.names=FALSE)
}
colnames(data)
data<-data.frame(extractMaxQuant("./01_source_files/proteinGroups.txt",quantification_type = "LFQ",cont.rm = T,site.rm = T,rev.rm = T))
colnames(data)<-gsub("X","d",colnames(data))
IDsdetails<-extractMaxQuantIDs("./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
metadata<- read.csv(file = "./01_source_files/metadata_biops.csv")
write.csv(extractMaxQuantIDs("./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T),"./03_output_files/MaxQuantIDS.csv")
romics_proteins<- romicsCreateObject(data,metadata,main_factor = "Disease_localization")
romics_proteins<- romicsZeroToMissing(romics_proteins)
romicsPlotMissing(romics_proteins)
romics_proteins<-romicsFilterMissing(romics_proteins,percentage_completeness = 50)
print(paste0(nrow(romics_proteins$data),"/", nrow(romics_proteins$original_data)," proteins remained after filtering", " (",round(nrow(romics_proteins$data)/nrow(romics_proteins$original_data)*100,2),"%)."))
romicsPlotMissing(romics_proteins)
romics_proteins<-log2transform(romics_proteins)
distribBoxplot(romics_proteins)
romics_proteins<-medianCenterSample(romics_proteins)
distribBoxplot(romics_proteins)
romicsHclust(romics_proteins)
indPCAplot(romics_proteins, ncp=5,plotType = "percentage")
indPCAplot(romics_proteins, ncp=5,plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_proteins, ncp=5,plotType = "individual",Xcomp=1,Ycomp =2)
install.packages("missMDA")
install.packages("missMDA")
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https:/cloud.r-project.org/")))
setwd("~/Documents/30 - CoV URMC/01_biopsies/01_proteomics/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("./03_output_files/Uniprot_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.fasta")){
download_UniProtFasta(proteomeID = "UP000005640",reviewed = T,export = TRUE, file="./03_output_files/Uniprot_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.fasta")
}
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
if(file.exists("./03_output_files/UniprotTable_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.csv")){
UniProtTable<-read.csv("./03_output_files/UniprotTable_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.csv")
}else{
download_UniProtTable(proteomeID = "UP000005640",reviewed = T)
write.csv(UniProtTable,("./03_output_files/UniprotTable_Homo_sapiens_proteome_Reviewed_UP000005640_2022_01_11.csv"),row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="./03_output_files/UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="./03_output_files/UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="./03_output_files/UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="./03_output_files/UniProtTable_KEGG.csv",row.names=FALSE)
}
colnames(data)
data<-data.frame(extractMaxQuant("./01_source_files/proteinGroups.txt",quantification_type = "LFQ",cont.rm = T,site.rm = T,rev.rm = T))
colnames(data)<-gsub("X","d",colnames(data))
IDsdetails<-extractMaxQuantIDs("./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
metadata<- read.csv(file = "./01_source_files/metadata_biops.csv")
write.csv(extractMaxQuantIDs("./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T),"./03_output_files/MaxQuantIDS.csv")
romics_proteins<- romicsCreateObject(data,metadata,main_factor = "Disease_localization")
romics_proteins<- romicsZeroToMissing(romics_proteins)
romicsPlotMissing(romics_proteins)
romics_proteins<-romicsFilterMissing(romics_proteins,percentage_completeness = 50)
print(paste0(nrow(romics_proteins$data),"/", nrow(romics_proteins$original_data)," proteins remained after filtering", " (",round(nrow(romics_proteins$data)/nrow(romics_proteins$original_data)*100,2),"%)."))
romicsPlotMissing(romics_proteins)
romics_proteins<-log2transform(romics_proteins)
distribBoxplot(romics_proteins)
romics_proteins<-medianCenterSample(romics_proteins)
distribBoxplot(romics_proteins)
romicsHclust(romics_proteins)
indPCAplot(romics_proteins, ncp=5,plotType = "percentage")
indPCAplot(romics_proteins, ncp=5,plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_proteins, ncp=5, plotType = "individual",Xcomp=2,Ycomp =3)
library(pmartR)
devtools::install_github("pmartR/pmartR")
library(pmartR)
romicsOutlierEval(romics_proteins,pvalue_threshold = 0.00001)
romics_proteins_noOutliers<-romicsOutlierRemove(romics_proteins,pvalue_threshold = 0.00001)
imputeMissingEval(romics_proteins,nb_stdev = 2,width_stdev = 0.5, bin=1)
romics_proteins<-imputeMissing(romics_proteins,nb_stdev = 2,width_stdev = 0.5)
romicsHclust(romics_proteins)
indPCAplot(romics_proteins, plotType = "percentage")
indPCAplot(romics_proteins, plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_proteins,  plotType = "individual",Xcomp=2,Ycomp =3)
indPCA3D(romics_proteins)
romicsUpdateSteps<-function(romics_object, arguments){
if(missing(arguments)){
steps<- c(paste0("date|",gsub(" ","_",format(Sys.time(),"%b_%d_%Y_%X")),"|step_not_recorded"), "note|The arguments of the function were not recorded using arguments<-as.list(match.call())")
}
funName<-arguments[[1]]
argumentsNames<-names(arguments)[2:length(arguments)]
#if(!exists(romics_object$steps)){stop(paste0("The function ",funName," was run on an object that was not an romics_object"))}
steps<- c(paste0("date|",gsub(" ","_",format(Sys.time(),"%b_%d_%Y_%X")),"|",funName))
fun<-paste0(funName,"(")
for(i in 1:length(argumentsNames)){
fun<-paste0(fun,argumentsNames[i],"=")
if(typeof(arguments[[i+1]])=="language"){
arguments[[i+1]]<-gsub("\"","'",deparse(arguments[[i+1]]))
fun<-paste0(fun,unlist(arguments[[i+1]]))
}else{
if(typeof(arguments[[i+1]])=="character"){
fun<-paste0(fun,"'",unlist(arguments[[i+1]]),"'")
}else{
fun<-paste0(fun,unlist(arguments[[i+1]]))
}}
if(i<length(argumentsNames)){fun<-paste0(fun,",")}
}
fun<-paste0("fun|",fun,")")
steps<- c(steps,fun)
romics_object$steps<-c(romics_object$steps,steps)
return(romics_object)
}
devtools::install()
devtools::install()
devtools::install()
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https:/cloud.r-project.org/")))
setwd("~/Documents/07 - LDRD lung-on-a-chip/07 - Infection H1N1 v2/")
getwd()
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https:/cloud.r-project.org/")))
setwd("~/Documents/07 - LDRD lung-on-a-chip/07 - Infection H1N1 v2/")
getwd()
if(!file.exists("./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_05_11.fasta")){
download_UniProtFasta(proteomeID = "UP000005640",reviewed = T,export = TRUE, file="./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_05_11.fasta")
}
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_05_11.fasta")
data_epi_chip<-extractMaxQuant(file = "./01_source_files/01_Chips_Epi/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T,quantification_type = "LFQ" )
library("RomicsProcessor")
data_epi_chip<-extractMaxQuant(file = "./01_source_files/01_Chips_Epi/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T,quantification_type = "LFQ" )
IDsdetails_epi_chip<-extractMaxQuantIDs("./01_source_files/01_Chips_Epi/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
metadata<-data.frame(matrix(nrow = 2,ncol=ncol(data_epi_chip)))
colnames(metadata)<-colnames(data_epi_chip)
metadata[1,]<-gsub(".{1}$","",colnames(metadata))
metadata[1,1]<-"condition"
metadata[2,]<-gsub("^.{3}","",colnames(metadata))
metadata[2,1]<-"sample_number"
romics_epi_chip<- romicsCreateObject(data_epi_chip,metadata,main_factor = "condition")
romics_proteins<- romicsZeroToMissing(romics_proteins)
romics_epi_chip<- romicsZeroToMissing(romics_epi_chip)
romics_object<- romics_epi_chip
romics_object$steps[1]
devtools::install()
devtools::install()
romicsUpdateSteps<-function(romics_object, arguments){
if(missing(arguments)){
steps<- c(paste0("date|",gsub(" ","_",format(Sys.time(),"%b_%d_%Y_%X")),"|step_not_recorded"), "note|The arguments of the function were not recorded using arguments<-as.list(match.call())")
}
funName<-arguments[[1]]
argumentsNames<-names(arguments)[2:length(arguments)]
if(romics_object$steps[1]!="romics_object"){stop(paste0("The function ",funName," was run on an object that was not an romics_object"))}
steps<- c(paste0("date|",gsub(" ","_",format(Sys.time(),"%b_%d_%Y_%X")),"|",funName))
fun<-paste0(funName,"(")
for(i in 1:length(argumentsNames)){
fun<-paste0(fun,argumentsNames[i],"=")
if(typeof(arguments[[i+1]])=="language"){
arguments[[i+1]]<-gsub("\"","'",deparse(arguments[[i+1]]))
fun<-paste0(fun,unlist(arguments[[i+1]]))
}else{
if(typeof(arguments[[i+1]])=="character"){
fun<-paste0(fun,"'",unlist(arguments[[i+1]]),"'")
}else{
fun<-paste0(fun,unlist(arguments[[i+1]]))
}}
if(i<length(argumentsNames)){fun<-paste0(fun,",")}
}
fun<-paste0("fun|",fun,")")
steps<- c(steps,fun)
romics_object$steps<-c(romics_object$steps,steps)
return(romics_object)
}
is.romics_object<-function(romics_object){
if(class(romics_object)!="romics_object"){
warning("Your romics_object was not created using the function romicsCreateObject")
return(FALSE)
}
if(romics_object$steps[1]!="romics_object"){
warning("Your romics_object is not in the appropriate format")
return(FALSE)
}else{
return(TRUE)
}
}
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https:/cloud.r-project.org/")))
setwd("~/Documents/07 - LDRD lung-on-a-chip/07 - Infection H1N1 v2/")
getwd()
library("RomicsProcessor")
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https:/cloud.r-project.org/")))
setwd("~/Documents/07 - LDRD lung-on-a-chip/07 - Infection H1N1 v2/")
getwd()
library("RomicsProcessor")
devtools::install()
devtools::install()
library(RomicsProcessor)
devtools::install()
library("RomicsProcessor")
library("proteinminon")
data_epi_chip<-extractMaxQuant(file = "./01_source_files/01_Chips_Epi/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T,quantification_type = "LFQ" )
IDsdetails_epi_chip<-extractMaxQuantIDs("./01_source_files/01_Chips_Epi/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
metadata<-data.frame(matrix(nrow = 2,ncol=ncol(data_epi_chip)))
colnames(metadata)<-colnames(data_epi_chip)
metadata[1,]<-gsub(".{1}$","",colnames(metadata))
metadata[1,1]<-"condition"
metadata[2,]<-gsub("^.{3}","",colnames(metadata))
metadata[2,1]<-"sample_number"
romics_epi_chip<- romicsCreateObject(data_epi_chip,metadata,main_factor = "condition")
romics_proteins<- romicsZeroToMissing(romics_proteins)
romics_epi_chip<- romicsZeroToMissing(romics_epi_chip)
romicsPlotMissing(romics_epi_chip)
romics_epi_chip<- romicsZeroToMissing(romics_epi_chip)
romicsPlotMissing(romics_epi_chip)
romics_epi_chip<-romicsFilterMissing(romics_epi_chip,percentage_completeness = 60)
print(paste0(nrow(romics_epi_chip$data),"/", nrow(romics_epi_chip$original_data)," proteins remained after filtering", " (",round(nrow(romics_epi_chip$data)/nrow(romics_epi_chip$original_data)*100,2),"%)."))
romicsPlotMissing(romics_epi_chip)
romics_epi_chip<-log2transform(romics_epi_chip)
distribBoxplot(romics_epi_chip)
romics_epi_chip<-medianCenterSample(romics_epi_chip)
distribBoxplot(romics_epi_chip)
romicsHclust(romics_epi_chip)
indPCAplot(romics_epi_chip, ncp=5,plotType = "percentage")
indPCAplot(romics_epi_chip, ncp=5,plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_epi_chip, ncp=5, plotType = "individual",Xcomp=2,Ycomp =3)
romicsCorrelation(romics_epi_chip,by_level = T)
romicsCorrelation(romics_epi_chip,by_level = F)
imputeMissingEval(romics_epi_chip,nb_stdev = 2,width_stdev = 0.5, bin=1)
romics_epi_chip<-imputeMissing(romics_epi_chip,nb_stdev = 2,width_stdev = 0.5)
romicsHclust(romics_epi_chip)
indPCAplot(romics_epi_chip, plotType = "percentage")
indPCAplot(romics_epi_chip, plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_epi_chip,  plotType = "individual",Xcomp=2,Ycomp =3)
indPCA3D(romics_epi_chip)
romics_epi_chip<-romicsMean(romics_epi_chip)
romics_epi_chip<-romicsSd(romics_epi_chip)
romics_epi_chip<-romicsANOVA(romics_epi_chip)
romicsHeatmap(romics_epi_chip,variable_hclust_number = 2,ANOVA_filter = "p", p=0.05,sample_hclust = F)
romics_epi_chip<-romicsVariableHclust(romics_epi_chip,clusters = 2,ANOVA_filter = "p",p= 0.05,plot = F)
romics_epi_chip<-romicsZscores(romics_epi_chip)
Enrichments<-romicsEnrichement(romics_proteins,cluster_filter = "hclust_clusters")
install.packages("~/OneDrive - PNNL/Documents/GitHub/RomicsProcessor_1.1.0.tar.gz", repos = NULL, type = "source")
library("proteinminon")
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https:/cloud.r-project.org/")))
setwd("~/Documents/07 - LDRD lung-on-a-chip/07 - Infection H1N1 v2/")
getwd()
library("RomicsProcessor")
library("proteinminon")
install.packages("~/OneDrive - PNNL/Documents/R packages/proteinminon_0.1.0.tar.gz", repos = NULL, type = "source")
library("RomicsProcessor")
library("proteinminon")
library("DT") #for the rendering of the enrichment tables
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https:/cloud.r-project.org/")))
setwd("~/Documents/07 - LDRD lung-on-a-chip/07 - Infection H1N1 v2/")
getwd()
library("RomicsProcessor")
library("proteinminon")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_05_11.fasta")){
download_UniProtFasta(proteomeID = "UP000005640",reviewed = T,export = TRUE, file="./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_05_11.fasta")
}
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_05_11.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
if(file.exists("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_05_11.csv")){
UniProtTable<-read.csv("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_05_11.csv")
}else{
download_UniProtTable(proteomeID = "UP000005640",reviewed = T)
write.csv(UniProtTable,("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_05_11.csv"),row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="./03_output_files/UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="./03_output_files/UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="./03_output_files/UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="./03_output_files/UniProtTable_KEGG.csv",row.names=FALSE)
}
data_epi_chip<-extractMaxQuant(file = "./01_source_files/01_Chips_Epi/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T,quantification_type = "LFQ" )
IDsdetails_epi_chip<-extractMaxQuantIDs("./01_source_files/01_Chips_Epi/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
metadata<-data.frame(matrix(nrow = 2,ncol=ncol(data_epi_chip)))
colnames(metadata)<-colnames(data_epi_chip)
metadata[1,]<-gsub(".{1}$","",colnames(metadata))
metadata[1,1]<-"condition"
metadata[2,]<-gsub("^.{3}","",colnames(metadata))
metadata[2,1]<-"sample_number"
romics_epi_chip<- romicsCreateObject(data_epi_chip,metadata,main_factor = "condition")
romics_epi_chip<- romicsZeroToMissing(romics_epi_chip)
romicsPlotMissing(romics_epi_chip)
romics_epi_chip<-romicsFilterMissing(romics_epi_chip,percentage_completeness = 60)
print(paste0(nrow(romics_epi_chip$data),"/", nrow(romics_epi_chip$original_data)," proteins remained after filtering", " (",round(nrow(romics_epi_chip$data)/nrow(romics_epi_chip$original_data)*100,2),"%)."))
romicsPlotMissing(romics_epi_chip)
romics_epi_chip<-log2transform(romics_epi_chip)
distribBoxplot(romics_epi_chip)
romics_epi_chip<-medianCenterSample(romics_epi_chip)
distribBoxplot(romics_epi_chip)
romicsHclust(romics_epi_chip)
indPCAplot(romics_epi_chip, ncp=5,plotType = "percentage")
indPCAplot(romics_epi_chip, ncp=5,plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_epi_chip, ncp=5, plotType = "individual",Xcomp=2,Ycomp =3)
romicsCorrelation(romics_epi_chip,by_level = T)
romicsCorrelation(romics_epi_chip,by_level = F)
imputeMissingEval(romics_epi_chip,nb_stdev = 2,width_stdev = 0.5, bin=1)
romics_epi_chip<-imputeMissing(romics_epi_chip,nb_stdev = 2,width_stdev = 0.5)
romicsHclust(romics_epi_chip)
indPCAplot(romics_epi_chip, plotType = "percentage")
indPCAplot(romics_epi_chip, plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_epi_chip,  plotType = "individual",Xcomp=2,Ycomp =3)
indPCA3D(romics_epi_chip)
romics_epi_chip<-romicsMean(romics_epi_chip)
romics_epi_chip<-romicsSd(romics_epi_chip)
romics_epi_chip<-romicsANOVA(romics_epi_chip)
romicsHeatmap(romics_epi_chip,variable_hclust_number = 2,ANOVA_filter = "p", p=0.05,sample_hclust = F)
romics_epi_chip<-romicsVariableHclust(romics_epi_chip,clusters = 2,ANOVA_filter = "p",p= 0.05,plot = F)
romics_epi_chip<-romicsZscores(romics_epi_chip)
Enrichments<-romicsEnrichement(romics_proteins,cluster_filter = "hclust_clusters")
Enrichments<-romicsEnrichement(romics_epi_chip,cluster_filter = "hclust_clusters")
Enrichments <- Enrichments[Enrichments$pval<0.1 &Enrichments$fold_change>=1,]
datatable(Enrichments)
write.table(Enrichments,file="03_output_files/Enrichments_ANOVA_clusts.txt",sep="\t",row.names = F)
Enrichments <- Enrichments[Enrichments$pval<0.1 &Enrichments$fold_change>=1,]
datatable(Enrichments)
write.table(Enrichments,file="03_output_files/Enrichments_ANOVA_clusts.txt",sep="\t",row.names = F)
romics_epi_chip<-romicsTtest(romics_epi_chip,percentage_completeness = 60)
romicsVolcano(romics_epi_chip)
pFrequencyPlot(romics_epi_chip)
romicsVolcano(romics_epi_chip,plot_type = "plotly")
devtools::document()
devtools::document()
devtools::document()
devtools::install()
