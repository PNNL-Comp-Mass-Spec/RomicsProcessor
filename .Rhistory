geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=0.05,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=0.05,y=max(hist(pval$p, seq(0,1,by=bin_width)/2, plot = FALSE)$counts)), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p,y=max(hist(pval$p, seq(0,1,by=bin_width)/2, plot = FALSE)$counts)), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
max(hist(pval$p, seq(0,1,by=bin_width)/2
)
hist(pval$p, seq(0,1,by=bin_width))$count/2
max(hist(pval$p, seq(0,1,by=bin_width))$count)/2
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p,y=max(hist(pval$p, seq(0,1,by=bin_width))$count)/2, seq(0,1,by=bin_width)/2, plot = FALSE)$counts)), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p,y=max(hist(pval$p, seq(0,1,by=bin_width))$count)/2), seq(0,1,by=bin_width)/2, plot = FALSE)$counts)), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
hist(pval$p, seq(0,1,by=bin_width))$count, plot=FALSE)/2
hist(pval$p, seq(0,1,by=bin_width))$count)
test<-max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)
test
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2, label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90))+
theme_ROP()
max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2
p
paste0("\n",colnames(pcol)[i],"<",p)
p
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2, label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90))
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90))+
theme_ROP()
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
test(c(x=p,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2))
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p,y=55), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p,y=55), label=paste0("\n",colnames(pcol)[i],"<",p))
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=0.05,y=55), label=paste0("\n",colnames(pcol)[i],"<",p))+
theme_ROP()
p
as.numeric(p)
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=t(as.numeric(p)),y=55, plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=as.numeric(p),y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=0.05,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=0.05,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/4*3), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=0.05,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/4*3), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=0.05,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/6*4), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
i<-2
pval<-data.frame(ids=rownames(pcol), p=as.numeric(t(pcol[i])))
print(paste0(sum(pval<p)," with ",colnames(pcol)[i],"<",p))
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=0.05,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=as.numeric(p),y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
p1<-p
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p1,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
pFrequencyPlot<-function(romics_object,p_columns="all",p=0.05,bin_width=0.01){
arguments<-as.list(match.call())
if(!is.romics_object(romics_object) | missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(missing(p_columns)){p_columns="all"}
if(is.character(p_columns)){stop("'p_columns' has to be a character vector.")}
if(missing(p)|!is.numeric(p)){p=0.05}
pcol<-romics_object$statistics[, grepl(".*_p$",colnames(romics_object$statistics))|grepl(".*_padj$",colnames(romics_object$statistics))]
if(p_columns!="all"){pcol<-pcol[,colnames(pcol) %in% p_columns]}
for (i in 1:ncol(pcol)){
p1<-p
pval<-data.frame(ids=rownames(pcol), p=as.numeric(t(pcol[i])))
print(paste0(sum(pval<p)," with ",colnames(pcol)[i],"<",p))
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p1,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
}
}
pFrequencyPlot(romics_proteins,p = 0.1,bin_width = 0.01)
romics_object<-romics_proteins
p_columns="all"
p=0.05
bin_width=0.01
if(!is.romics_object(romics_object) | missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(missing(p_columns)){p_columns="all"}
if(is.character(p_columns)){stop("'p_columns' has to be a character vector.")}
if(missing(p)|!is.numeric(p)){p=0.05}
pcol<-romics_object$statistics[, grepl(".*_p$",colnames(romics_object$statistics))|grepl(".*_padj$",colnames(romics_object$statistics))]
if(p_columns!="all"){pcol<-pcol[,colnames(pcol) %in% p_columns]}
for (i in 1:ncol(pcol)){
p1<-p
pval<-data.frame(ids=rownames(pcol), p=as.numeric(t(pcol[i])))
print(paste0(sum(pval<p)," with ",colnames(pcol)[i],"<",p))
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p1,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
}
for (i in 1:ncol(pcol)){
p1<-p
pval<-data.frame(ids=rownames(pcol), p=as.numeric(t(pcol[i])))
print(paste0(sum(pval<p)," with ",colnames(pcol)[i],"<",p))
ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p1,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP()
}
for (i in 1:ncol(pcol)){
p1<-p
pval<-data.frame(ids=rownames(pcol), p=as.numeric(t(pcol[i])))
print(paste0(sum(pval<p)," with ",colnames(pcol)[i],"<",p))
print(ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p1,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP())
}
pFrequencyPlot<-function(romics_object,p_columns="all",p=0.05,bin_width=0.01){
arguments<-as.list(match.call())
if(!is.romics_object(romics_object) | missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(missing(p_columns)){p_columns="all"}
if(is.character(p_columns)){stop("'p_columns' has to be a character vector.")}
if(missing(p)|!is.numeric(p)){p=0.05}
pcol<-romics_object$statistics[, grepl(".*_p$",colnames(romics_object$statistics))|grepl(".*_padj$",colnames(romics_object$statistics))]
if(p_columns!="all"){pcol<-pcol[,colnames(pcol) %in% p_columns]}
for (i in 1:ncol(pcol)){
p1<-p
pval<-data.frame(ids=rownames(pcol), p=as.numeric(t(pcol[i])))
print(paste0(sum(pval<p)," with ",colnames(pcol)[i],"<",p))
print(ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p1,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP())
}
}
pFrequencyPlot(romics_object)
pFrequencyPlot<-function(romics_object,p_columns="all",p=0.05,bin_width=0.01){
arguments<-as.list(match.call())
if(!is.romics_object(romics_object) | missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(missing(p_columns)){p_columns=as.character("all")}
if(is.character(p_columns)){stop("'p_columns' has to be a character vector.")}
if(missing(p)|!is.numeric(p)){p=0.05}
pcol<-romics_object$statistics[, grepl(".*_p$",colnames(romics_object$statistics))|grepl(".*_padj$",colnames(romics_object$statistics))]
if(p_columns!="all"){pcol<-pcol[,colnames(pcol) %in% p_columns]}
for (i in 1:ncol(pcol)){
p1<-p
pval<-data.frame(ids=rownames(pcol), p=as.numeric(t(pcol[i])))
print(paste0(sum(pval<p)," with ",colnames(pcol)[i],"<",p))
print(ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p1,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP())
}
}
pFrequencyPlot<-function(romics_object,p_columns="all",p=0.05,bin_width=0.01){
arguments<-as.list(match.call())
if(!is.romics_object(romics_object) | missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(missing(p_columns)){p_columns=as.character("all")}
if(is.character(p_columns)){stop("'p_columns' has to be a character vector.")}
if(missing(p)|!is.numeric(p)){p=0.05}
pcol<-romics_object$statistics[, grepl(".*_p$",colnames(romics_object$statistics))|grepl(".*_padj$",colnames(romics_object$statistics))]
if(p_columns!="all"){pcol<-pcol[,colnames(pcol) %in% p_columns]}
for (i in 1:ncol(pcol)){
p1<-p
pval<-data.frame(ids=rownames(pcol), p=as.numeric(t(pcol[i])))
print(paste0(sum(pval<p)," with ",colnames(pcol)[i],"<",p))
print(ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p1,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP())
}
}
pFrequencyPlot(romics_object)
pFrequencyPlot<-function(romics_object,p_columns="all",p=0.05,bin_width=0.01){
arguments<-as.list(match.call())
if(!is.romics_object(romics_object) | missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(missing(p_columns)){p_columns="all"}
if(!is.character(p_columns)){stop("'p_columns' has to be a character vector.")}
if(missing(p)|!is.numeric(p)){p=0.05}
pcol<-romics_object$statistics[, grepl(".*_p$",colnames(romics_object$statistics))|grepl(".*_padj$",colnames(romics_object$statistics))]
if(p_columns!="all"){pcol<-pcol[,colnames(pcol) %in% p_columns]}
for (i in 1:ncol(pcol)){
p1<-p
pval<-data.frame(ids=rownames(pcol), p=as.numeric(t(pcol[i])))
print(paste0(sum(pval<p)," with ",colnames(pcol)[i],"<",p))
print(ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p1,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP())
}
}
pFrequencyPlot(romics_object)
pFrequencyPlot<-function(romics_object,p_columns="all",p=0.05,bin_width=0.01){
arguments<-as.list(match.call())
if(!is.romics_object(romics_object) | missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(missing(p_columns)){p_columns="all"}
if(!is.character(p_columns)){stop("'p_columns' has to be a character vector.")}
if(missing(p)|!is.numeric(p)){p=0.05}
pcol<-romics_object$statistics[, grepl(".*_p$",colnames(romics_object$statistics))|grepl(".*_padj$",colnames(romics_object$statistics))]
if(p_columns!="all"){pcol<-pcol[,colnames(pcol) %in% p_columns]}
for (i in 1:ncol(pcol)){
p1<-p
pval<-data.frame(ids=rownames(pcol), p=as.numeric(t(pcol[i])))
print(paste0(sum(pval<p)," with ",colnames(pcol)[i],"<",p))
print(ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p1,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP())
}
}
test
pFrequencyPlot<-function(romics_object,p_columns="all",p=0.05,bin_width=0.01){
arguments<-as.list(match.call())
if(!is.romics_object(romics_object) | missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(missing(p_columns)){p_columns="all"}
if(!is.character(p_columns)){stop("p_columns has to be a character vector.")}
if(missing(p)|!is.numeric(p)){p=0.05}
pcol<-romics_object$statistics[, grepl(".*_p$",colnames(romics_object$statistics))|grepl(".*_padj$",colnames(romics_object$statistics))]
if(p_columns!="all"){pcol<-pcol[,colnames(pcol) %in% p_columns]}
for (i in 1:ncol(pcol)){
p1<-p
pval<-data.frame(ids=rownames(pcol), p=as.numeric(t(pcol[i])))
print(paste0(sum(pval<p)," with ",colnames(pcol)[i],"<",p))
print(ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p1,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP())
}
}
pFrequencyPlot(romics_object)
pFrequencyPlot(romics_proteins)
pFrequencyPlot(romics_proteins)
devtools::document()
devtools::document()
devtools::document()
devtools::install()
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https:/cloud.r-project.org/")))
setwd("~/Documents/28 - Aging Lung/01_AgLung_P/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("./03_output_files/Uniprot_Mus_musculus_proteome_UP000000589_2021_06_28.fasta")){
download_UniProtFasta(proteomeID = "UP000000589",reviewed = T,export = TRUE, file="./03_output_files/Uniprot_Mus_musculus_proteome_UP000000589_2021_06_28.fasta")
}
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Mus_musculus_proteome_UP000000589_2021_06_28.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
UniProtTable<-read.csv("./03_output_files/UniprotTable_Mus_musculus_proteome_UP000000589_2021_06_28.csv")
UniProtTable_GO<-read.csv(file="./03_output_files/UniProtTable_GO.csv")
UniProtTable_KEGG<-read.csv(file="./03_output_files/UniProtTable_KEGG.csv")
data<-data.frame(extractMaxQuant("./01_source_files/proteinGroups.txt",quantification_type = "LFQ",cont.rm = T,site.rm = T,rev.rm = T))
IDsdetails<-extractMaxQuantIDs("./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
data[,1]<-gsub("\\;.*","",data[,1])
data[,1]<-gsub(".*\\|","",data[,1])
IDsdetails<-cbind(Identifier=data[,1],IDsdetails)
colnames(data)<- sub("LFQ.intensity.","A",colnames(data))
metadata<- read.csv(file = "./01_source_files/metadata.csv")
write.csv(extractMaxQuantIDs("./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T),"./03_output_files/MaxQuantIDS.csv")
romics_proteins<- romicsCreateObject(data,metadata,main_factor = "Treatment")
romics_proteins<- romicsSampleNameFromFactor(romics_proteins,factor =  metadata[4,1])
romics_proteins<- romicsZeroToMissing(romics_proteins)
romicsPlotMissing(romics_proteins)
romics_proteins<-romicsFilterMissing(romics_proteins,percentage_completeness = 60)
print(paste0(nrow(romics_proteins$data),"/", nrow(romics_proteins$original_data)," proteins remained after filtering", " (",round(nrow(romics_proteins$data)/nrow(romics_proteins$original_data)*100,2),"%)."))
romicsPlotMissing(romics_proteins)
romics_proteins<-log2transform(romics_proteins)
distribBoxplot(romics_proteins)
romics_proteins<-medianCenterSample(romics_proteins)
distribBoxplot(romics_proteins)
romicsHclust(romics_proteins)
indPCAplot(romics_proteins, ncp=5,plotType = "percentage")
indPCAplot(romics_proteins, ncp=5,plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_proteins, ncp=5, plotType = "individual",Xcomp=2,Ycomp =3)
imputeMissingEval(romics_proteins,nb_stdev = 2,width_stdev = 0.5, bin=1)
romics_proteins<-imputeMissing(romics_proteins,nb_stdev = 2,width_stdev = 0.5)
romicsHclust(romics_proteins)
indPCAplot(romics_proteins, plotType = "percentage")
indPCAplot(romics_proteins, plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_proteins,  plotType = "individual",Xcomp=2,Ycomp =3)
indPCA3D(romics_proteins)
romics_proteins<-romicsMean(romics_proteins)
romics_proteins<-romicsSd(romics_proteins)
romics_proteins<-romicsANOVA(romics_proteins)
romicsHeatmap(romics_proteins,variable_hclust_number = 2,ANOVA_filter = "p", p=0.05,sample_hclust = F)
romics_proteins<-romicsVariableHclust(romics_proteins,clusters = 2,ANOVA_filter = "p",p= 0.05,plot = F)
romics_proteins<-romicsZscores(romics_proteins)
Enrichments<-romicsEnrichement(romics_proteins,cluster_filter = "hclust_clusters")
Enrichments <- Enrichments[Enrichments$pval<0.1 &Enrichments$fold_change>=1,]
datatable(Enrichments)
romics_proteins<-romicsTtest(romics_proteins,percentage_completeness = 60)
romicsVolcano(romics_proteins)
romicsVolcano(romics_proteins)
romicsVolcano<-function(romics_object, p_type= "p", p= 0.05, min_fold_change=0.6,colors = c("#2cbcb2", "#242021", "#d44e28"),stat_type="t.test",plot="all", plot_type="ggplot"){
if(!is.romics_object(romics_object) | missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(missing(p_type)){p_type="p"}
if(!p_type %in% c("p","padj")){stop("'p_type' has to be either 'p' or 'padj'")}
if(missing(colors)){colors=c("#2cbcb2", "#242021", "#d44e28")}
if(!is.character(colors)| length(colors)!=3){
warning("'colors' should be a color character vector of lenght 3. The defaults colors were used")
colors=c("#2cbcb2", "#242021", "#d44e28")
}
if(missing(p)){p=0.05}
if(!is.numeric(p)|p>1|p<0){stop("'p' should be numeric and comprised between 0 and 1.")}
if(missing(min_fold_change)){min_fold_change=0.6}
if(!is.numeric(min_fold_change)|min_fold_change<0){stop("'min_fold_change' should be numeric and comprised higher than 0.")}
if(missing(plot_type)){plot_type="ggplot"}
if(!plot_type %in% c("plotly","ggplot")){
warning("'plot_type' was not either 'plotly' or 'ggplot' the 'plotly' type was used by default.")
plot_type="plotly"
}
if(missing(plot)){plot="all"}
#extract stats
stats<-romics_object$statistics
#remove duplicate columns
stats<-stats[,unique(colnames(stats))]
#verify if Ttest and or WilcoxTest exist
if(sum(grepl("_Ttest_p",colnames(stats)))+sum(grepl("_Wilcox_test_p",colnames(stats)))<=0){stop("Prior to plot the volcano plot(s) either T.tests or Wilcox.tests have to be run, to run these test use the functions romicsTtest() and/or romicsWilcoxTest()")}
#if stat_type missing use t.test by default unless does not exist (then use wilcox.test)
if(missing(stat_type)){
if(sum(grepl("_Ttest_p",colnames(stats)))>0){
stat_type="t.test"
print("'stat_type' was missing 't.test' were used by default")}else{
stat_type="wilcox.test"
print("'stat_type' was missing 'wilcox.test' were used by default")}
}
if(!stat_type %in% c("t.test","wilcox.test")){stop("'stat_type' has to be either 't.test' or 'wilcox.test'.")}
#remove columns with p or padj (depending on the p_type)
if (p_type == "p") {
stats <- stats[, !grepl("_padj", colnames(stats))]
}
if (p_type == "padj") {
stats <- stats[, grepl("_Ttest_padj", colnames(stats)), drop = FALSE]
}
#identify Ttest or WilcoxTests columns
if(stat_type=="t.test"){
test_col<-stats[grepl("_Ttest_",colnames(stats))]
colnames(test_col)<-sub("_Ttest.*","",colnames(test_col))
colnames(test_col)<-sub("_vs_","\\/",colnames(test_col))
}else{
test_col<-stats[grepl("_Wilcox_test_",colnames(stats))]
colnames(test_col)<-sub("_Wilcox_test_.*","",colnames(test_col))
colnames(test_col)<-sub("_vs_","\\/",colnames(test_col))
}
#transform the test columns to calculate the -log10(p(test))
test_col<- log10(test_col)*-1
fc_col <- stats[grepl("\\/", colnames(stats))] #collected earlier in function (following creation of 'stats' object)
#identify the fold_change columns
if(sum(grepl("log\\(",colnames(fc_col)))==ncol(fc_col)){fc_log=TRUE}else{
if(sum(grepl("log\\(",colnames(fc_col)))==0){fc_log=FALSE}else{
warning("some of the fold-changes in the statistics layer of the 'romics_object' were calculated both prior and after log_transform.")
warning("Only the log transformed will be used to generate the Volcano plots")
fc_col<-fc_col[,grepl("log\\(",colnames(fc_col))]
}
}
#if not logged then log transform the fold change columns
if(fc_log==FALSE){
fc_col=log2(fc_col)
log_type=2
min_fold_change<-log2(min_fold_change)
}else{
if(romicsLogCheck(romics_object)&grepl("fun\\|log2",romics_object$steps[grepl("fun\\|log",romics_object$steps)])){log_type=2}else{log_type=10}
}
#format the colnames so they are identical to the pvalues ones
colnames(fc_col)<-sub("log","",colnames(fc_col))
colnames(fc_col)<-sub("\\(","",colnames(fc_col))
colnames(fc_col)<-sub("\\)","",colnames(fc_col))
minus_log_p<-log10(p)*-1
if(sum(colnames(fc_col) %in% colnames(test_col))!=ncol(fc_col)){warning("Some of the fold-change columns were not having a equivalent statistical test to generate a Volcano plot.")}
if(plot=="all"){plot<-1:ncol(fc_col)}
if(!is.numeric(plot) & sum(!plot %in% 1:ncol(fc_col))!=0){stop(paste0("'plot' as to be either 'all' or a numeric vector with values comprised between 1 and ",ncol(fc_col),"."))}else{
for(i in plot){
df<-cbind(rownames(fc_col),fc_col[i], test_col[colnames(test_col)==colnames(fc_col)[i]])
colnames(df)<-c("ID","fc","p")
class<- rep("non_significant",nrow(df))
class[df$p>minus_log_p&df$fc<(min_fold_change*-1)]<-"down"
class[df$p>minus_log_p&df$fc>(min_fold_change)]<-"up"
class<-paste0(class,"_in_",sub("\\/.*","",colnames(fc_col[i])))
df$class<-class
if(plot_type=="ggplot"){
fig<-ggplot(df,aes(x=fc,y=p,colour=class))+geom_point(alpha=0.5)+
theme_ROP()+ggtitle(paste0("Volcano plot for ",colnames(fc_col[i])))+
xlab(paste0("log",log_type,"(",colnames(fc_col[i]),")"))+
ylab(paste0("-log10(",p_type,"_",stat_type,"_",colnames(fc_col[i]),")"))+
scale_colour_manual(values=colors)
plot(fig)}else{
title=paste0("Volcano plot for ",colnames(fc_col[i]))
print(plot_ly(x = df$fc,
y = df$p,
color =df$class,
colors=colors,
type = "scatter",mode="markers",
text=paste("ID=",df$ID)) %>% layout(title=paste0("Volcano plot for ",colnames(fc_col[i])),
xaxis=list(title=paste0("log",log_type,"(",colnames(fc_col[i]),")")),
yaxis=list(title=paste0("-log10(",p_type,"_",stat_type,"_",colnames(fc_col[i]),")"))))
}
}}
}
romics_proteins<-romicsTtest(romics_proteins,percentage_completeness = 60)
romicsVolcano(romics_proteins)
pFrequencyPlot(romics_proteins)
pFrequencyPlot<-function(romics_object,p_columns="all",p=0.05,bin_width=0.01){
arguments<-as.list(match.call())
if(!is.romics_object(romics_object) | missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(missing(p_columns)){p_columns="all"}
if(!is.character(p_columns)){stop("p_columns has to be a character vector.")}
if(missing(p)|!is.numeric(p)){p=0.05}
pcol<-romics_object$statistics[, grepl(".*_p$",colnames(romics_object$statistics))|grepl(".*_padj$",colnames(romics_object$statistics))]
if(p_columns!="all"){pcol<-pcol[,colnames(pcol) %in% p_columns]}
for (i in 1:ncol(pcol)){
p1<-p
pval<-data.frame(ids=rownames(pcol), p=as.numeric(t(pcol[i])))
print(paste0(sum(pval<p,na.rm = T)," with ",colnames(pcol)[i],"<",p))
print(ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p1,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("\n",colnames(pcol)[i],"<",p),colour="red",angle=90)+
theme_ROP())
}
}
pFrequencyPlot(romics_proteins)
pFrequencyPlot<-function(romics_object,p_columns="all",p=0.05,bin_width=0.01){
arguments<-as.list(match.call())
if(!is.romics_object(romics_object) | missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(missing(p_columns)){p_columns="all"}
if(!is.character(p_columns)){stop("p_columns has to be a character vector.")}
if(missing(p)|!is.numeric(p)){p=0.05}
pcol<-romics_object$statistics[, grepl(".*_p$",colnames(romics_object$statistics))|grepl(".*_padj$",colnames(romics_object$statistics))]
if(p_columns!="all"){pcol<-pcol[,colnames(pcol) %in% p_columns]}
for (i in 1:ncol(pcol)){
p1<-p
pval<-data.frame(ids=rownames(pcol), p=as.numeric(t(pcol[i])))
print(paste0(sum(pval<p,na.rm = T)," with ",colnames(pcol)[i],"<",p))
print(ggplot(pval, aes(p)) +
geom_histogram(binwidth = bin_width)+
ggtitle(paste0("Frequency plot: ",colnames(pcol[i])))+geom_vline(xintercept=p,linetype="dashed", color = "red")+
geom_text(aes(x=p1,y=max(hist(pval$p, seq(0,1,by=bin_width), plot = FALSE)$counts)/2), label=paste0("p=",p),colour="red",angle=90)+
theme_ROP())
}
}
devtools::install()
