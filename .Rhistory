vec<-rowSums(!is.na(usable.df))>=min_full[[i]]
list_usable[,i] <- vec
}
colnames(list_usable)<-level_factor
if (all_groups == "TRUE") {
usable_groups <- (length_factor - 1) #if TRUE, then apply filter to all groups
}
else {
if (all_groups == "FALSE") {
usable_groups <- 0 #if FALSE, filter applies to at least one group at a minimum
}
}
usable <- rowSums(list_usable) > usable_groups
if (all_groups == "TRUE") {
usable_groups <- (length_factor - 1) #if TRUE, then apply filter to all groups
}
else {
if (all_groups == "FALSE") {
usable_groups <- 0 #if FALSE, filter applies to at least one group at a minimum
}
}
if(!is.romics_object(romics_object) | missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(missing(main_factor)){
warning("your main_factor was missing the main_factor of the romics_object was used")
main_factor<-"main"}
if(missing(percentage_completeness)){
warning("The acceptable percentage of completeness was not set by the user it was set at 50% by default")
percentage_completeness<-50}
if(percentage_completeness<0 & percentage_completeness>100){stop("the completeness has to be comprised between 0 and 100 %")}
if(sum(is.na(romics_object$data))==0){warning("There is no missing values in this dataset data to be removed")}
if(missing(all_groups)){all_groups=FALSE}
#extract main factor
if(main_factor=="none"){
selected_factor<-rep("overal_sample_number",ncol(romics_object$metadata))}
if(main_factor %in% romicsFactorNames(romics_object) ){
selected_factor<-romics_object$metadata[romicsFactorNames(romics_object)==main_factor,]}
if(main_factor=="main"){
selected_factor<-romics_object$main_factor
selected_factor<-romics_object$metadata[romicsFactorNames(romics_object)==selected_factor,]
}else{
if(main_factor!="none"){
stop("The selected <main_factor> was not present in the list of factor of this romics_object use the function romicsFactorNames() to identify the usable factors.")}}
#transform in character
selected_factor<-as.character(t(selected_factor))
#create a table counting each factor level
table<-table(selected_factor)
#verify if none of the levels had 0 or 1 member only and warn if it is the case
if(sum(table %in% 0:1)>0){
warning("One or more of the factor levels had only 1 member.")
warning(table)
warning("You should consider subsetting the object using the function romicsSubset() to remove the levels with only one columns.")
stop()
}
#establish the levels of this factor
level_factor<-levels(as.factor(selected_factor))
#calculate the number of conditions
length_factor <- length(level_factor)
#create a count table for each factor
replicates_factor <- as.double(table)
names(replicates_factor) <- level_factor
#calculate the quantity of cells to be full in each given condition
if(percentage_completeness==0){
max_empty<-replicates_factor*0
}else{max_empty <- floor((replicates_factor)*(1-percentage_completeness/100))}
min_full<-replicates_factor-max_empty
#calculate if the missingness maximum pass for each level of the factor
list_usable <- data.frame(matrix(nrow=nrow(romics_object$data),ncol=0))
rownames(list_usable)<-rownames(romics_object$data)
for (i in 1:length_factor) {
usable.df <- data.frame()
usable.df <- romics_object$data[,grepl(level_factor[i],selected_factor)]
vec<-rowSums(!is.na(usable.df))>=min_full[[i]]
list_usable[,i] <- vec
}
colnames(list_usable)<-level_factor
if (all_groups == "TRUE") {
usable_groups <- (length_factor - 1) #if TRUE, then apply filter to all groups
}
else {
if (all_groups == "FALSE") {
usable_groups <- 0 #if FALSE, filter applies to at least one group at a minimum
}
}
usable <- rowSums(list_usable) > usable_groups
#remove the rows based on this usable vector
romics_object$data<-romics_object$data[usable,]
#update the missingness
romics_object$missingdata<-data.frame(is.na(romics_object$data))
#print the number info
print(paste(sum(usable==FALSE),"rows were removed for the data"))
print(paste0("Based on the minimum completeness set at ",percentage_completeness,"%"))
print("at least the following number of sample(s) containing data was required:")
print(min_full)
romics_object<- romicsUpdateColor(romics_object)
romics_object<-romicsUpdateSteps(romics_object,arguments)
#message with the number of proteins removed
print(paste0(nrow(romics_object$data),"/", nrow(romics_object$original_data)," proteins remained after filtering", " (",round(nrow(romics_object$data)/nrow(romics_object$original_data)*100,2),"%)."))
print(paste0(nrow(romics_object$data),"/", nrow(romics_object$original_data)," proteins remained after filtering", " (",round(nrow(romics_object$data)/nrow(romics_object$original_data)*100,2),"%)."))
nrow(romics_object$data)
romicsCorrelation<-function(romics_object,by_level=FALSE,factor="main",imputed=FALSE,corr_type="pearson",...){
if(!is.romics_object(romics_object) | missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(missing(by_level)){by_level=FALSE}
if(!by_level %in% c(TRUE,FALSE)){stop("<by_levels> has to be either TRUE or FALSE")}
if(missing(imputed)){imputed=FALSE}
if(!imputed %in% c(TRUE,FALSE)){stop("<imputed> has to be either TRUE or FALSE")}
if(missing(corr_type)){corr_type="pearson"}
if(!corr_type %in% c("pearson", "kendall","spearman")){stop("<corr_type> has to be either 'pearson', 'kendall',or 'spearman'")}
if(missing(factor)){factor="main"}
if(imputed == FALSE){romics_object<-romicsRestoreMissing(romics_object)}
data<-romics_object$data
myplots<-list()
if(by_level==FALSE){myplots[[1]]<- ggpairs(data,upper = list(continous = wrap("cor",method=corr_type)),...)+theme_ROP()}else{
if(factor=="main"){factor<-romics_object$main_factor}
if(!factor %in% romics_object$main_factor){stop("the <factor> was not in the list of factors comprised in this romics_object, use the function romicsFactorNames() to get the full list.")}
factor<-as.factor(t(romics_object$metadata[rownames(romics_object$metadata)==factor,]))
lv<-levels(factor)
factor<-as.character(factor)
for (i in 1:length(lv)){
dt<-data[,factor==lv[i]]
myplots[[i]]<-ggpairs(dt,upper = list(continous = wrap("cor",method=corr_type)),...)
}
}
myplots
}
test<-1
test
romicsFilterMissing<-function(romics_object, percentage_completeness=50, main_factor = "main",all_groups=FALSE){
arguments<-as.list(match.call())
if(!is.romics_object(romics_object) | missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(missing(main_factor)){
warning("your main_factor was missing the main_factor of the romics_object was used")
main_factor<-"main"}
if(missing(percentage_completeness)){
warning("The acceptable percentage of completeness was not set by the user it was set at 50% by default")
percentage_completeness<-50}
if(percentage_completeness<0 & percentage_completeness>100){stop("the completeness has to be comprised between 0 and 100 %")}
if(sum(is.na(romics_object$data))==0){warning("There is no missing values in this dataset data to be removed")}
if(missing(all_groups)){all_groups=FALSE}
#extract main factor
if(main_factor=="none"){
selected_factor<-rep("overal_sample_number",ncol(romics_object$metadata))}
if(main_factor %in% romicsFactorNames(romics_object) ){
selected_factor<-romics_object$metadata[romicsFactorNames(romics_object)==main_factor,]}
if(main_factor=="main"){
selected_factor<-romics_object$main_factor
selected_factor<-romics_object$metadata[romicsFactorNames(romics_object)==selected_factor,]
}else{
if(main_factor!="none"){
stop("The selected <main_factor> was not present in the list of factor of this romics_object use the function romicsFactorNames() to identify the usable factors.")}}
#transform in character
selected_factor<-as.character(t(selected_factor))
#create a table counting each factor level
table<-table(selected_factor)
#verify if none of the levels had 0 or 1 member only and warn if it is the case
if(sum(table %in% 0:1)>0){
warning("One or more of the factor levels had only 1 member.")
warning(table)
warning("You should consider subsetting the object using the function romicsSubset() to remove the levels with only one columns.")
stop()
}
#establish the levels of this factor
level_factor<-levels(as.factor(selected_factor))
#calculate the number of conditions
length_factor <- length(level_factor)
#create a count table for each factor
replicates_factor <- as.double(table)
names(replicates_factor) <- level_factor
#calculate the quantity of cells to be full in each given condition
if(percentage_completeness==0){
max_empty<-replicates_factor*0
}else{max_empty <- floor((replicates_factor)*(1-percentage_completeness/100))}
min_full<-replicates_factor-max_empty
#calculate if the missingness maximum pass for each level of the factor
list_usable <- data.frame(matrix(nrow=nrow(romics_object$data),ncol=0))
rownames(list_usable)<-rownames(romics_object$data)
for (i in 1:length_factor) {
usable.df <- data.frame()
usable.df <- romics_object$data[,grepl(level_factor[i],selected_factor)]
vec<-rowSums(!is.na(usable.df))>=min_full[[i]]
list_usable[,i] <- vec
}
colnames(list_usable)<-level_factor
if (all_groups == "TRUE") {
usable_groups <- (length_factor - 1) #if TRUE, then apply filter to all groups
}
else {
if (all_groups == "FALSE") {
usable_groups <- 0 #if FALSE, filter applies to at least one group at a minimum
}
}
usable <- rowSums(list_usable) > usable_groups
#remove the rows based on this usable vector
romics_object$data<-romics_object$data[usable,]
#update the missingness
romics_object$missingdata<-data.frame(is.na(romics_object$data))
#print the number info
print(paste(sum(usable==FALSE),"rows were removed for the data"))
print(paste0("Based on the minimum completeness set at ",percentage_completeness,"%"))
print("at least the following number of sample(s) containing data was required:")
print(min_full)
romics_object<- romicsUpdateColor(romics_object)
romics_object<-romicsUpdateSteps(romics_object,arguments)
#message with the number of proteins removed
print(paste0(nrow(romics_object$data),"/", nrow(romics_object$original_data)," proteins remained after filtering", " (",round(nrow(romics_object$data)/nrow(romics_object$original_data)*100,2),"%)."))
#return object
return(romics_object)
}
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/05 - Lungmap/30 - Fibroblasts CD140 SNAPP/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
data<-extractMaxQuant("./01_source_files/proteinGroups.txt",quantification_type = "LFQ",cont.rm = T,site.rm = T,rev.rm = T)
IDsdetails<-extractMaxQuantIDs("./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
metadata<- read.csv(file = "./01_source_files/metadata.csv")
colnames(metadata)<-tolower(colnames(metadata))
write.csv(IDsdetails,"./01_source_files/MaxQuantIDS.csv")
romics_proteins<- romicsCreateObject(data, metadata,main_factor = "Condition")
romics_proteins<- romicsZeroToMissing(romics_proteins)
romicsPlotMissing(romics_proteins)
romics_proteins<-romicsFilterMissing(romics_proteins, percentage_completeness = 60)
print(paste0(nrow(romics_proteins$data),"/", nrow(romics_proteins$original_data)," proteins remained after filtering", " (",round(nrow(romics_proteins$data)/nrow(romics_proteins$original_data)*100,2),"%)."))
romicsPlotMissing(romics_proteins)
romics_proteins<-log2transform(romics_proteins)
romics_proteins<-medianCenterSample(romics_proteins)
distribBoxplot(romics_proteins)
romicsCorrelation(romics_proteins)
library(GGally)
romicsCorrelation(romics_proteins)
romicsCorrelation(romics_proteins,by_level = TRUE)
test
romicsHclust(romics_proteins)
imputeMissingEval(romics_proteins,nb_stdev = 2,width_stdev = 0.5, bin=1)
romics_proteins<-imputeMissing(romics_proteins,nb_stdev = 2,width_stdev = 0.5)
romics_proteins<-romicsFilterMissing(romics_proteins, percentage_completeness = 60)
romicsPlotMissing(romics_proteins)
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/05 - Lungmap/30 - Fibroblasts CD140 SNAPP/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
data<-extractMaxQuant("./01_source_files/proteinGroups.txt",quantification_type = "LFQ",cont.rm = T,site.rm = T,rev.rm = T)
IDsdetails<-extractMaxQuantIDs("./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
metadata<- read.csv(file = "./01_source_files/metadata.csv")
colnames(metadata)<-tolower(colnames(metadata))
write.csv(IDsdetails,"./01_source_files/MaxQuantIDS.csv")
romics_proteins<- romicsCreateObject(data, metadata,main_factor = "Condition")
romics_proteins<- romicsZeroToMissing(romics_proteins)
romicsPlotMissing(romics_proteins)
romics_proteins<-romicsFilterMissing(romics_proteins, percentage_completeness = 60)
romicsPlotMissing(romics_proteins)
romics_proteins<-log2transform(romics_proteins)
romics_proteins<-medianCenterSample(romics_proteins)
distribBoxplot(romics_proteins)
romicsCorrelation(romics_proteins)
romicsCorrelation(romics_proteins,by_level = TRUE)
romicsHclust(romics_proteins)
imputeMissingEval(romics_proteins,nb_stdev = 2,width_stdev = 0.5, bin=1)
romics_proteins<-imputeMissing(romics_proteins,nb_stdev = 2,width_stdev = 0.5)
PCA_proteins<-romicsPCA(romics_proteins)
indPCAplot(romics_proteins, plotType = "percentage")
indPCAplot(romics_proteins, plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_proteins,  plotType = "individual",Xcomp=1,Ycomp =3)
indPCA3D(romics_proteins)
romics_proteins<-romicsMean(romics_proteins)
romics_proteins<-romicsSd(romics_proteins)
romics_proteins<-romicsANOVA(romics_proteins)
romics_proteins<-romicsTtest(romics_proteins,percentage_completeness = 70)
romicsHeatmap(romics_proteins,variable_hclust_number = 5,ANOVA_filter = "p", p=0.05)
romics_proteins<-romicsVariableHclust(romics_proteins,clusters = 5,ANOVA_filter = "p",p= 0.05,plot = F)
romics_proteins<-romicsZscores(romics_proteins)
romicsVolcano(romics_proteins)
romics_proteins<-romicsTrend(romics_proteins,factor = "PC_days",log_factor = FALSE,p = 0.05)
romicsTrendHeatmap(romics_proteins,log_factor = FALSE,labRow = FALSE,margins=c(10,5) )
pFrequencyPlot(romics_proteins)
Clust1<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==1&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust2<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==2&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust3<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==3&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust4<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==4&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust5<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==5&!is.na(romics_proteins$statistics$hclust_clusters)]
Universe<-rownames(romics_proteins$statistics)
Clust1_KEGG<-cbind(clust="clust1",UniProt_KEGG_EASE(Clust1,Universe))
View(UniProtTable_KEGG)
View(UniProtTable)
UniProtTable_KEGG<-read.csv(file="./03_output_files/UniProtTable_KEGG.csv")
UniProtTable_GO<-read.csv(file="./03_output_files/UniProtTable_GO.csv")
Clust1<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==1&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust2<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==2&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust3<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==3&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust4<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==4&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust5<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==5&!is.na(romics_proteins$statistics$hclust_clusters)]
Universe<-rownames(romics_proteins$statistics)
Clust1_KEGG<-cbind(clust="clust1",UniProt_KEGG_EASE(Clust1,Universe))
Clust1_KEGG<-cbind(clust="clust1",UniProt_KEGG_EASE(Clust1,Universe))
Clust1<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==1&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust2<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==2&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust3<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==3&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust4<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==4&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust5<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==5&!is.na(romics_proteins$statistics$hclust_clusters)]
Universe<-rownames(romics_proteins$statistics)
Clust1_KEGG<-cbind(clust="clust1",UniProt_KEGG_EASE(Clust1,Universe))
Clust1[1]
View(UniProtTable_GO)
View(UniProtTable)
UniProtTable<-read.csv("./03_output_files/UniprotTable_mus_musculus_proteome_UP000000589_2021_08_04.csv")
Clust1<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==1&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust2<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==2&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust3<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==3&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust4<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==4&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust5<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==5&!is.na(romics_proteins$statistics$hclust_clusters)]
Universe<-rownames(romics_proteins$statistics)
Clust1_KEGG<-cbind(clust="clust1",UniProt_KEGG_EASE(Clust1,Universe))
Clust2_KEGG<-cbind(clust="clust2",UniProt_KEGG_EASE(Clust2,Universe))
Clust3_KEGG<-cbind(clust="clust3",UniProt_KEGG_EASE(Clust3,Universe))
Clust4_KEGG<-cbind(clust="clust4",UniProt_KEGG_EASE(Clust4,Universe))
Clust5_KEGG<-cbind(clust="clust5",UniProt_KEGG_EASE(Clust5,Universe))
Clust1_GO<-cbind(clust="clust1",UniProt_GO_EASE(Clust1,Universe))
Clust2_GO<-cbind(clust="clust2",UniProt_GO_EASE(Clust2,Universe))
Clust3_GO<-cbind(clust="clust3",UniProt_GO_EASE(Clust3,Universe))
Clust4_GO<-cbind(clust="clust4",UniProt_GO_EASE(Clust4,Universe))
Clust5_GO<-cbind(clust="clust5",UniProt_GO_EASE(Clust5,Universe))
Enrichments_clust <- rbind(Clust1_GO,Clust1_KEGG,Clust2_GO,Clust2_KEGG,Clust3_GO,Clust3_KEGG,Clust4_GO,Clust4_KEGG,Clust5_GO,Clust5_KEGG)
Enrichments_clust <- Enrichments_clust[Enrichments_clust$pval<0.1&Enrichments$fold_change>1,]
Clust1<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==1&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust2<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==2&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust3<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==3&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust4<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==4&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust5<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==5&!is.na(romics_proteins$statistics$hclust_clusters)]
Universe<-rownames(romics_proteins$statistics)
Clust1_KEGG<-cbind(clust="clust1",UniProt_KEGG_EASE(Clust1,Universe))
Clust2_KEGG<-cbind(clust="clust2",UniProt_KEGG_EASE(Clust2,Universe))
Clust3_KEGG<-cbind(clust="clust3",UniProt_KEGG_EASE(Clust3,Universe))
Clust4_KEGG<-cbind(clust="clust4",UniProt_KEGG_EASE(Clust4,Universe))
Clust5_KEGG<-cbind(clust="clust5",UniProt_KEGG_EASE(Clust5,Universe))
Clust1_GO<-cbind(clust="clust1",UniProt_GO_EASE(Clust1,Universe))
Clust2_GO<-cbind(clust="clust2",UniProt_GO_EASE(Clust2,Universe))
Clust3_GO<-cbind(clust="clust3",UniProt_GO_EASE(Clust3,Universe))
Clust4_GO<-cbind(clust="clust4",UniProt_GO_EASE(Clust4,Universe))
Clust5_GO<-cbind(clust="clust5",UniProt_GO_EASE(Clust5,Universe))
Enrichments_clust <- rbind(Clust1_GO,Clust1_KEGG,Clust2_GO,Clust2_KEGG,Clust3_GO,Clust3_KEGG,Clust4_GO,Clust4_KEGG,Clust5_GO,Clust5_KEGG)
Enrichments_clust <- Enrichments_clust[Enrichments_clust$pval<0.1&Enrichments_clust$fold_change>1,]
write.table(Enrichments_clust,file="Enrichment_ANOVA_clust.csv")
DT::datatable(Enrichments)
DT::datatable(Enrichments_clust)
linear_increasing<-rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_increasing"]
linear_decreasing<-rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_decreasing"]
quadratic_convex<-rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="quadratic_convex"]
linear_increasing<-rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_increasing"]
linear_decreasing<-rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_decreasing"]
quadratic_concave<-rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="quadratic_concave"]
quadratic_convex<-rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="quadratic_convex"]
linear_increasing_KEGG<-cbind(clust="linear_increasing",UniProt_KEGG_EASE(linear_increasing,Universe))
linear_decreasing_KEGG<-cbind(clust="linear_decreasing",UniProt_KEGG_EASE(linear_decreasing,Universe))
quadratic_concave_KEGG<-cbind(clust="quadratic_concave",UniProt_KEGG_EASE(quadratic_concave,Universe))
quadratic_convex_KEGG<-cbind(clust="quadratic_convex",UniProt_KEGG_EASE(quadratic_convex,Universe))
linear_increasing_GO<-cbind(clust="linear_increasing",UniProt_GO_EASE(linear_increasing,Universe))
linear_decreasing_GO<-cbind(clust="linear_decreasing",UniProt_GO_EASE(linear_decreasing,Universe))
quadratic_concave_GO<-cbind(clust="quadratic_concave",UniProt_GO_EASE(quadratic_concave,Universe))
quadratic_convex_GO<-cbind(clust="quadratic_convex",UniProt_GO_EASE(quadratic_convex,Universe))
Enrichments_trends <- rbind(linear_increasing_GO,linear_increasing_KEGG,linear_decreasing_GO,linear_decreasing_KEGG,quadratic_concave_GO,quadratic_concave_KEGG,quadratic_concave_GO,quadratic_concave_KEGG)
Enrichments_trends <- Enrichments_trends[Enrichments_trends$pval<0.1&Enrichments_trends$fold_change>1,]
singleVariableTrend(romics_proteins,"Q15109",title = "Rage/Ager(AT1)",log_factor = F)
singleVariableTrend(romics_proteins,"A2A8Z1",log_factor = F)
romics_proteins<-romicsTrend(romics_proteins,factor = "PC_days",log_factor = FALSE,p = 0.001)
romicsTrendHeatmap(romics_proteins,log_factor = FALSE,labRow = FALSE,margins=c(10,5) )
devtools::document()
devtools::document()
devtools::install()
library(RomicsProcessor)
detach("package:RomicsProcessor", unload = TRUE)
library(RomicsProcessor)
detach("package:RomicsProcessor", unload = TRUE)
devtools::install()
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/05 - Lungmap/30 - Fibroblasts CD140 SNAPP/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("./03_output_files/Uniprot_mus_musculus_proteome_UP000000589_2021_08_04.fasta")){
download_UniProtFasta(proteomeID = "UP000000589",reviewed = T,export = TRUE, file="./03_output_files/Uniprot_Uniprot_mus_musculus_proteome_UP000000589_2021_08_04.fasta")
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Uniprot_mus_musculus_proteome_UP000000589_2021_08_04.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
}
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/05 - Lungmap/30 - Fibroblasts CD140 SNAPP/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("./03_output_files/Uniprot_mus_musculus_proteome_UP000000589_2021_08_04.fasta")){
download_UniProtFasta(proteomeID = "UP000000589",reviewed = T,export = TRUE, file="./03_output_files/Uniprot_Uniprot_mus_musculus_proteome_UP000000589_2021_08_04.fasta")
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Uniprot_mus_musculus_proteome_UP000000589_2021_08_04.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
}
if(file.exists("./03_output_files/UniprotTable_mus_musculus_proteome_UP000000589_2021_08_04.csv")){
UniProtTable<-read.csv("./03_output_files/UniprotTable_mus_musculus_proteome_UP000000589_2021_08_04.csv")
}else{
download_UniProtTable(proteomeID = "UP000000589",reviewed = F)
write.csv(UniProtTable,("./03_output_files/UniprotTable_mus_musculus_proteome_UP000000589_2021_08_04.csv"),row.names=FALSE)
}
if(file.exists("./03_output_files/UniprotTable_mus_musculus_proteome_UP000000589_2021_08_04.csv")){
UniProtTable<-read.csv("./03_output_files/UniprotTable_mus_musculus_proteome_UP000000589_2021_08_04.csv")
}else{
download_UniProtTable(proteomeID = "UP000000589",reviewed = F)
write.csv(UniProtTable,("./03_output_files/UniprotTable_mus_musculus_proteome_UP000000589_2021_08_04.csv"),row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="./03_output_files/UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="./03_output_files/UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="./03_output_files/UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="./03_output_files/UniProtTable_KEGG.csv",row.names=FALSE)
}
romics_proteins<- romicsCreateObject(data, metadata,main_factor = "Condition")
data<-extractMaxQuant("./01_source_files/proteinGroups.txt",quantification_type = "LFQ",cont.rm = T,site.rm = T,rev.rm = T)
IDsdetails<-extractMaxQuantIDs("./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
metadata<- read.csv(file = "./01_source_files/metadata.csv")
colnames(metadata)<-tolower(colnames(metadata))
write.csv(IDsdetails,"./03_output_files/MaxQuantIDS.csv")
romics_proteins<- romicsCreateObject(data, metadata,main_factor = "Condition")
romics_proteins<- romicsZeroToMissing(romics_proteins)
romicsPlotMissing(romics_proteins)
romics_proteins<-romicsFilterMissing(romics_proteins, percentage_completeness = 60)
romicsPlotMissing(romics_proteins)
romics_proteins<-log2transform(romics_proteins)
romics_proteins<-medianCenterSample(romics_proteins)
distribBoxplot(romics_proteins)
romicsCorrelation(romics_proteins)
romicsCorrelation(romics_proteins,by_level = TRUE)
imputeMissingEval(romics_proteins,nb_stdev = 2,width_stdev = 0.5, bin=1)
romics_proteins<-imputeMissing(romics_proteins,nb_stdev = 2,width_stdev = 0.5)
romicsHclust(romics_proteins)
imputeMissingEval(romics_proteins,nb_stdev = 2,width_stdev = 0.5, bin=1)
romics_proteins<-imputeMissing(romics_proteins,nb_stdev = 2,width_stdev = 0.5)
PCA_proteins<-romicsPCA(romics_proteins)
indPCAplot(romics_proteins, plotType = "percentage")
indPCAplot(romics_proteins, plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_proteins,  plotType = "individual",Xcomp=1,Ycomp =3)
indPCA3D(romics_proteins)
romics_proteins<-romicsMean(romics_proteins)
romics_proteins<-romicsSd(romics_proteins)
romics_proteins<-romicsANOVA(romics_proteins)
romics_proteins<-romicsTtest(romics_proteins,percentage_completeness = 70)
romicsHeatmap(romics_proteins,variable_hclust_number = 5,ANOVA_filter = "p", p=0.05)
romics_proteins<-romicsVariableHclust(romics_proteins,clusters = 5,ANOVA_filter = "p",p= 0.05,plot = F)
romics_proteins<-romicsZscores(romics_proteins)
romicsVolcano(romics_proteins)
romicsVolcano(romics_proteins,plot_type = "plotly")
romics_proteins<-romicsTrend(romics_proteins,factor = "PC_days",log_factor = FALSE,p = 0.001)
romicsTrendHeatmap(romics_proteins,log_factor = FALSE,labRow = FALSE,margins=c(10,5) )
pFrequencyPlot(romics_proteins)
Clust1<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==1&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust2<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==2&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust3<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==3&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust4<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==4&!is.na(romics_proteins$statistics$hclust_clusters)]
Clust5<-rownames(romics_proteins$statistics)[romics_proteins$statistics$hclust_clusters==5&!is.na(romics_proteins$statistics$hclust_clusters)]
Universe<-rownames(romics_proteins$statistics)
Clust1_KEGG<-cbind(clust="clust1",UniProt_KEGG_EASE(Clust1,Universe))
Clust2_KEGG<-cbind(clust="clust2",UniProt_KEGG_EASE(Clust2,Universe))
Clust3_KEGG<-cbind(clust="clust3",UniProt_KEGG_EASE(Clust3,Universe))
Clust4_KEGG<-cbind(clust="clust4",UniProt_KEGG_EASE(Clust4,Universe))
Clust5_KEGG<-cbind(clust="clust5",UniProt_KEGG_EASE(Clust5,Universe))
Clust1_GO<-cbind(clust="clust1",UniProt_GO_EASE(Clust1,Universe))
Clust2_GO<-cbind(clust="clust2",UniProt_GO_EASE(Clust2,Universe))
Clust3_GO<-cbind(clust="clust3",UniProt_GO_EASE(Clust3,Universe))
Clust4_GO<-cbind(clust="clust4",UniProt_GO_EASE(Clust4,Universe))
Clust5_GO<-cbind(clust="clust5",UniProt_GO_EASE(Clust5,Universe))
Enrichments_clust <- rbind(Clust1_GO,Clust1_KEGG,Clust2_GO,Clust2_KEGG,Clust3_GO,Clust3_KEGG,Clust4_GO,Clust4_KEGG,Clust5_GO,Clust5_KEGG)
Enrichments_clust <- Enrichments_clust[Enrichments_clust$pval<0.1&Enrichments_clust$fold_change>1,]
write.table(Enrichments_clust,file="./03_output_files/Enrichment_ANOVA_clust.txt",sep="\t")
DT::datatable(Enrichments_clust)
linear_increasing<-rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_increasing"]
linear_decreasing<-rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="linear_decreasing"]
quadratic_concave<-rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="quadratic_concave"]
quadratic_convex<-rownames(romics_proteins$statistics)[romics_proteins$statistics$best_fitted_trend=="quadratic_convex"]
linear_increasing_KEGG<-cbind(clust="linear_increasing",UniProt_KEGG_EASE(linear_increasing,Universe))
linear_decreasing_KEGG<-cbind(clust="linear_decreasing",UniProt_KEGG_EASE(linear_decreasing,Universe))
quadratic_concave_KEGG<-cbind(clust="quadratic_concave",UniProt_KEGG_EASE(quadratic_concave,Universe))
quadratic_convex_KEGG<-cbind(clust="quadratic_convex",UniProt_KEGG_EASE(quadratic_convex,Universe))
linear_increasing_GO<-cbind(clust="linear_increasing",UniProt_GO_EASE(linear_increasing,Universe))
linear_decreasing_GO<-cbind(clust="linear_decreasing",UniProt_GO_EASE(linear_decreasing,Universe))
quadratic_concave_GO<-cbind(clust="quadratic_concave",UniProt_GO_EASE(quadratic_concave,Universe))
quadratic_convex_GO<-cbind(clust="quadratic_convex",UniProt_GO_EASE(quadratic_convex,Universe))
Enrichments_trends <- rbind(linear_increasing_GO,linear_increasing_KEGG,linear_decreasing_GO,linear_decreasing_KEGG,quadratic_concave_GO,quadratic_concave_KEGG,quadratic_concave_GO,quadratic_concave_KEGG)
Enrichments_trends <- Enrichments_trends[Enrichments_trends$pval<0.1&Enrichments_trends$fold_change>1,]
write.table(Enrichments_trends,"./03_output_files/Enrichment_trends.txt",sep="\t")
DT::datatable(Enrichments_trends)
results<-romicsExportData(romics_proteins,statistics = T,missing_data = T)
results<-merge(IDsdetails,results,by.x = "UniProt_Name", by.y=0)
results<-merge(IDsdetails,results,by.x = "proteins.ids", by.y=0)
results<-merge(IDsdetails,results,by.x = "protein.ids", by.y=0)
representativeIDs<- data.frame(Uniprot_Accession=gsub("\\;.*","",results$majority.protein.ids))
representativeIDs<- merge(representativeIDs,UniProtTable,by="Uniprot_Accession")
results<-cbind(representativeIDs,results)
write.csv(results, "./03_output_files/CD140_complete_analysis.csv")
library(RomicsProcessor)
devtools::install()
devtools::build()
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/05 - Lungmap/30 - Fibroblasts CD140 SNAPP/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
