distribBoxplot(romics_TMT)
romics_TMT<-romicsSubset(romics_TMT,subset = c("Empty"),type = "drop",by = "level",factor = "Disease_status")
distribBoxplot(romics_TMT)
romics_TMT<-medianNormSample(romics_TMT)
distribBoxplot(romics_TMT)
romicsPlotMissing(romics_TMT)
romics_TMT<-romicsFilterMissing(romics_TMT,percentage_completeness = 70,main_factor = "main")
romicsPlotMissing(romics_TMT)
romicsHclust(romics_TMT)
imputeMissingEval(romics_TMT,bin=0.5,nb_stdev = 1.8,width_stdev = 1)
romics_TMT<-imputeMissing(romics_TMT,nb_stdev = 2,width_stdev = 0.5)
#PCA plot prior batch effect correction
pca_results<-romicsPCA(romics_TMT)
indPCAplot(romics_TMT,plotType = "individual",label = T)
indPCAplot(romics_TMT,plotType = "individual",label = T,Xcomp = 2,Ycomp = 3, ncp=5)
indPCA3D(romics_TMT)
romics_TMT<-romicsMean(romics_TMT)
romics_TMT<-romicsSd(romics_TMT)
romics_TMT<-romicsZscores(romics_TMT)
romics_TMT<-romicsTtest(romics_TMT)
romics_TMT<-romicsANOVA(romics_TMT)
romicsHeatmap(romics_TMT, ANOVA_filter = "p",p=0.05,sample_hclust = F,variable_hclust_number = 2)
romicsVolcano(romics_TMT, plot_type = "plotly")
if(!file.exists("./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2021_03_23.fasta")){
download_UniProtFasta(proteomeID = "UP000005640",reviewed = F,export = TRUE, file="./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2021_03_23.fasta")
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2021_03_23.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
}
download_UniProtTable(proteomeID = "UP000005640",reviewed = F)
write.csv(UniProtTable,("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2020_07_29.csv"),row.names=FALSE)
if(!file.exists("./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2021_03_23.fasta")){
download_UniProtFasta(proteomeID = "UP000005640",reviewed = F,export = TRUE, file="./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2021_03_23.fasta")
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2021_03_23.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
}
if(file.exists("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2021_08_03.csv")){
UniProtTable<-read.csv("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2021_08_03.csv")
}else{
download_UniProtTable(proteomeID = "UP000005640",reviewed = F)
write.csv(UniProtTable,("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2021_08_03.csv"),row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="./03_output_files/UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="./03_output_files/UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="./03_output_files/UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="./03_output_files/UniProtTable_KEGG.csv",row.names=FALSE)
}
data_TMT<-extractMaxQuant(file = "./01_source_files/proteinGroups.txt",quantification_type = "TMT")
metadata<-read.csv("01_source_files/metadata.csv")
colnames(metadata)<-gsub("^X","",colnames(metadata))
romics_TMT<-romicsCreateObject(data_TMT,metadata,main_factor = "Disease_status")
romics_TMT<-romicsSampleNameFromFactor(romics_TMT,factor = "Sample_name")
extractMaxQuant<-function(file= "/filepath/proteinGroups.txt",quantification_type="LFQ", cont.rm=TRUE,site.rm=TRUE, rev.rm=TRUE, min_peptides=1, min_unique_peptides=1, min_razor_peptides=1){
# ensure that the file is named ProteinGroups.txt
if(substr(file,nchar(file)-16, nchar(file))!="proteinGroups.txt"){stop("The specified file is not a ProteinGroup file")}
if(!quantification_type %in% c("LFQ","Intensity","iBAQ","MS.MS", "Identification.Type","TMT", "TMT.corrected")){stop("The quantification_type is not appropriate")}
if(missing(cont.rm)){cont.rm<-TRUE}
if(missing(site.rm)){site.rm<-TRUE}
if(missing(rev.rm)){rev.rm<-TRUE}
if(missing(min_peptides)){min_peptides=1}
if(!is.numeric(min_peptides) & !is.numeric(min_peptides)){stop("'min_peptides' has to be numerical and of lenght 1 indicating the proteins with a given minimum of peptides.")}
if(missing(min_unique_peptides)){min_unique_peptides=1}
if(!is.numeric(min_unique_peptides) & !is.numeric(min_unique_peptides)){stop("'min_razor_peptides' has to be numerical and of lenght 1 indicating the proteins with a given minimum of peptides.")}
if(missing(min_razor_peptides)){min_razor_peptides=1}
if(!is.numeric(min_razor_peptides) & !is.numeric(min_razor_peptides)){stop("'min_razor_peptides' has to be numerical and of lenght 1 indicating the proteins with a given minimum of peptides.")}
# read the protein group file
prGR <- read.delim(file)
# lower the case of the column names
colnames(prGR)<- tolower(colnames(prGR))
# remove proteins with less than the min peptide count
if (min_peptides>1){
pep_count<-prGR$peptide.counts..all.
pep_count<-sub("\\;.*","",pep_count)
print(paste0(sum(pep_count<=min_peptides)," protein had less than ",min_peptides," peptides and were removed."))
prGR<-prGR[pep_count<=min_peptides,]
}
if (min_unique_peptides>1){
pep_count<-prGR$peptide.counts..razor.unique.
pep_count<-sub("\\;.*","",pep_count)
print(paste0(sum(pep_count<=min_unique_peptides)," protein had less than ",min_unique_peptides," peptides and were removed."))
prGR<-prGR[pep_count<=min_unique_peptides,]
}
if (min_razor_peptides>1){
pep_count<-prGR$peptide.counts..razor.unique.
pep_count<-sub("\\;.*","",pep_count)
print(paste0(sum(pep_count<=min_razor_peptides)," protein had less than ",min_razor_peptides," peptides and were removed."))
prGR<-prGR[pep_count<=min_razor_peptides,]
}
#set the list of ids to keep
listIDs <-c("protein.ids")
#Create a counts df
counts <- data.frame(total.protein.count=nrow(prGR),
only.identified.by.site= sum(as.character(prGR$only.identified.by.site)=="+",na.rm=T),
potential.contaminants= sum(as.character(prGR$potential.contaminant)=="+",na.rm=T),
reverse= sum(as.character(prGR$reverse)=="+",na.rm=T))
#Remove the proteins identified by site potential contaminants and reverse hits
if(counts$only.identified.by.site>0&&site.rm==TRUE){prGR <- prGR[prGR$only.identified.by.site!="+",]}
if(counts$potential.contaminants>0&&cont.rm==TRUE){prGR <- prGR[as.character(prGR$potential.contaminant)!="+",]}
if(counts$reverse>0&&rev.rm==TRUE){prGR <- prGR[as.character(prGR$reverse)!="+",]}
#Protein Count after removal
counts <- cbind(counts,after.removal=nrow(prGR))
type.rm<-"("
if(site.rm==TRUE){type.rm<-paste0(type.rm,"protein(s) only identified by site,")}
if(cont.rm==TRUE){type.rm<-paste0(type.rm,"contaminant(s),")}
if(rev.rm==TRUE){type.rm<-paste0(type.rm,"reverse hit(s),")}
type.rm<- substr(type.rm,1,nchar(type.rm)-1)
type.rm<-paste0(type.rm,")")
if(site.rm+cont.rm+rev.rm==0){
print("All proteins including contaminants, reverse hits and site only were conserved")
}else{
print(paste(counts$total.protein.count-counts$after.removal," Proteins were removed",type.rm))
}
#store the names of the groups in a proteinIDs df
proteinIDs <- prGR[,colnames(prGR) %in% listIDs]
#Keep only the columns corresponding the the appropriate quantification type
if(quantification_type=="iBAQ"){
protein_quantification <- prGR[,grepl("ibaq.",names(prGR))]
colnames(protein_quantification) <- gsub("ibaq.","iBAQ.",colnames(protein_quantification))
print("iBAQ quantification was used")
}
if(quantification_type=="LFQ"){
protein_quantification <- prGR[,grepl("lfq.intensity.",names(prGR))]
colnames(protein_quantification) <- gsub("lfq.intensity.","",colnames(protein_quantification))
print("LFQ quantification was used")
}
if(quantification_type=="Intensity"){
protein_quantification <- prGR[,grepl("intensity.",names(prGR))]
colnames(protein_quantification) <- gsub("intensity.","",colnames(protein_quantification))
print("Intensities were used")
}
if(quantification_type=="MS.MS"){
protein_quantification <- prGR[,grepl("ms.ms.",names(prGR))]
colnames(protein_quantification) <- gsub("ms.ms.","",colnames(protein_quantification))
print("Spectral count was used")
}
if(quantification_type=="Identification.Type"){
protein_quantification <- prGR[,grepl("identification.type.",names(prGR))]
colnames(protein_quantification) <- gsub("identification.type.","",colnames(protein_quantification))
print("The resulting object is containing the identification type")
}
if(quantification_type=="TMT.corrected"){
protein_quantification <- prGR[,grepl("reporter.intensity.corrected.",names(prGR))]
colnames(protein_quantification) <- gsub("reporter.intensity.corrected.","",colnames(protein_quantification))
print("TMT reporter intensity was used.")
}
if(quantification_type=="TMT"){
protein_quantification <- prGR[,grepl("reporter.intensity.",names(prGR))]
protein_quantification <-  protein_quantification[,!grepl("reporter.intensity.corrected.|reporter.intensity.count.",names( protein_quantification))]
colnames(protein_quantification) <- gsub("reporter.intensity.","",colnames(protein_quantification))
print("TMT reporter intensity was used.")
}
return(cbind(proteinIDs,protein_quantification))
}
data_TMT<-extractMaxQuant(file = "./01_source_files/proteinGroups.txt",quantification_type = "TMT.corrected")
metadata<-read.csv("01_source_files/metadata.csv")
colnames(metadata)<-gsub("^X","",colnames(metadata))
romics_TMT<-romicsCreateObject(data_TMT,metadata,main_factor = "Disease_status")
View(data_TMT)
data_TMT<-extractMaxQuant(file = "./01_source_files/proteinGroups.txt",quantification_type = "TMT")
metadata<-read.csv("01_source_files/metadata.csv")
colnames(metadata)<-gsub("^X","",colnames(metadata))
romics_TMT<-romicsCreateObject(data_TMT,metadata,main_factor = "Disease_status")
romics_TMT<-romicsSampleNameFromFactor(romics_TMT,factor = "Sample_name")
romics_TMT<-romicsZeroToMissing(romics_TMT)
romics_TMT<-log2transform(romics_TMT)
distribBoxplot(romics_TMT)
romics_TMT<-romicsSubset(romics_TMT,subset = c("Empty"),type = "drop",by = "level",factor = "Disease_status")
distribBoxplot(romics_TMT)
View(romics_TMT$steps)
romics_TMT<-romicsSubset(romics_TMT,subset = c("Empty"),type = "drop",by = "level",factor = "Disease_status")
distribBoxplot(romics_TMT)
romics_TMT<-medianNormSample(romics_TMT)
distribBoxplot(romics_TMT)
romicsPlotMissing(romics_TMT)
romics_TMT<-romicsFilterMissing(romics_TMT,percentage_completeness = 70,main_factor = "main")
romicsPlotMissing(romics_TMT)
romicsHclust(romics_TMT)
imputeMissingEval(romics_TMT,bin=0.5,nb_stdev = 1.8,width_stdev = 1)
romics_TMT<-imputeMissing(romics_TMT,nb_stdev = 2,width_stdev = 0.5)
#PCA plot prior batch effect correction
pca_results<-romicsPCA(romics_TMT)
indPCAplot(romics_TMT,plotType = "individual",label = T)
indPCAplot(romics_TMT,plotType = "individual",label = T,Xcomp = 2,Ycomp = 3, ncp=5)
indPCA3D(romics_TMT)
romics_TMT<-romicsMean(romics_TMT)
romics_TMT<-romicsSd(romics_TMT)
romics_TMT<-romicsZscores(romics_TMT)
romics_TMT<-romicsTtest(romics_TMT)
romics_TMT<-romicsANOVA(romics_TMT)
romicsHeatmap(romics_TMT, ANOVA_filter = "p",p=0.05,sample_hclust = F,variable_hclust_number = 2)
romics_TMT<-romicsVariableHclust(romics_TMT,clusters = 2,plot=F, ANOVA_filter = "p",p = 0.05)
colnames(romics_TMT$statistics)
romicsEnrichement(romics_TMT,cluster_filter = "hclust_clusters")
enrichments_ANOVA<-romicsEnrichement(romics_TMT,cluster_filter = "hclust_clusters")
View(enrichments_ANOVA)
enrichments_ANOVA_filtered<-enrichments_ANOVA[enrichments_ANOVA$pval<0.1&enrichments_ANOVA$fold_change>1,]
enrichments_ANOVA<-romicsEnrichement(romics_TMT,cluster_filter = "hclust_clusters")
datatable(enrichments_ANOVA)
pFrequencyPlot(romics_TMT)
enrichments_ANOVA_filtered
View(enrichments_ANOVA_filtered)
colnames(romics_TMT$statistics)
up_in_Severe_vs_control<- romicsEnrichement(romics_TMT,statCol_filter = "Severe_vs_ctrl_Ttest_p" ,statCol_text = "<0.05",statCol_filter = "log(Severe/ctrl)",statCol_text2 = ">0")
up_in_Severe_vs_control<-colnames(romics_TMT$statistics)[romics_TMT$statistics$Severe_vs_ctrl_Ttest_p<0.05&romics_TMT$statistics$`log(Severe/ctrl)`>0]
down_in_Severe_vs_control<-colnames(romics_TMT$statistics)[romics_TMT$statistics$Severe_vs_ctrl_Ttest_p<0.05&romics_TMT$statistics$`log(Severe/ctrl)`<0]
down_in_Severe_vs_control<-colnames(romics_TMT$statistics)
up_in_Severe_vs_control<-rownames(romics_TMT$statistics)[romics_TMT$statistics$Severe_vs_ctrl_Ttest_p<0.05&romics_TMT$statistics$`log(Severe/ctrl)`>0]
down_in_Severe_vs_control<-rownames(romics_TMT$statistics)[romics_TMT$statistics$Severe_vs_ctrl_Ttest_p<0.05&romics_TMT$statistics$`log(Severe/ctrl)`<0]
universe<-rownames(romics_TMT$statistics)
up_in_Severe_vs_control_GO<-UniProt_GO_EASE(up_in_Severe_vs_control,universe)
enrichments_ttest_severe_vs_control<-rbind(up_in_Severe_vs_control_GO,up_in_Severe_vs_control_KEGG,down_in_Severe_vs_control_GO,down_in_Severe_vs_control_KEGG)
up_in_Severe_vs_control_GO<-cbind(type="up_in_severe",UniProt_GO_EASE(up_in_Severe_vs_control,universe))
up_in_Severe_vs_control_KEGG<-cbind(type="up_in_severe",UniProt_KEGG_EASE(up_in_Severe_vs_control,universe))
down_in_Severe_vs_control_GO<-cbind(type="down_in_severe",UniProt_GO_EASE(down_in_Severe_vs_control,universe))
down_in_Severe_vs_control_KEGG<-cbind(type="down_in_severe",UniProt_KEGG_EASE(down_in_Severe_vs_control,universe))
enrichments_ttest_severe_vs_control<-rbind(up_in_Severe_vs_control_GO,up_in_Severe_vs_control_KEGG,down_in_Severe_vs_control_GO,down_in_Severe_vs_control_KEGG)
View(enrichments_ttest_severe_vs_control)
enrichments_ttest_severe_vs_control_filtered<-enrichments_ttest_severe_vs_control[enrichments_ttest_severe_vs_control$pval&enrichments_ttest_severe_vs_control$fold_change>0,]
datatable(enrichments_ttest_severe_vs_control_filtered)
View(data_TMT)
MaxQuant_IDs<-extractMaxQuantIDs(file = "./01_source_files/proteinGroups.txt")
View(MaxQuant_IDs)
singleVariablePlot(romics_TMT,variable = "P08174",title = "CD55")
singleVariablePlot(romics_TMT,variable = "P08174",title = "ACTA2")
singleVariablePlot(romics_TMT,variable = "Q15109",title = "AGER")
singleVariablePlot(romics_TMT,variable = "P08174",title = "CD55")
singleVariablePlot(romics_TMT,variable = "Q15109",title = "AGER")
View(MaxQuant_IDs)
singleVariablePlot(romics_TMT,variable = "Q9UQV4",title = "LAMP3")
singleVariablePlot(romics_TMT,variable = "P02452",title = "Collagen 1ɑ1")
singleVariablePlot(romics_proteins,variable ="P02647")+ggtitle(label = "APOA1")+
singleVariablePlot(romics_TMT,variable ="P02647")+ggtitle(label = "APOA1")+
singleVariablePlot(romics_TMT,variable ="P02647")+ggtitle(label = "APOA1")
singleVariablePlot(romics_proteins,variable ="P06727",title = "APOA4")
singleVariablePlot(romics_TMT,variable ="P06727",title = "APOA4")
singleVariablePlot(romics_proteins,variable ="Q07954",title= "low-density lipoprotein receptor-related protein 1")
singleVariablePlot(romics_TMT,variable ="Q07954",title= "low-density lipoprotein receptor-related protein 1")
singleVariablePlot(romics_proteins,variable ="P11684",title = "Uteroglobin (airway)")
singleVariablePlot(romics_TMT,variable ="P11684",title = "Uteroglobin (airway)")
singleVariablePlot(romics_proteins,variable ="E9PIM6",title = "THY1 (Matrix Fibroblast 2)")
singleVariablePlot(romics_TMT,variable ="E9PIM6",title = "THY1 (Matrix Fibroblast 2)")
singleVariablePlot(romics_TMT,variable ="P04216",title = "THY1 (Matrix Fibroblast 2)")
singleVariablePlot(romics_TMT,variable = "P62736;",title = "ACTA2")
singleVariablePlot(romics_TMT,variable = "P08670",title = "Vimentin")
romicsHeatmap(romics_TMT, ANOVA_filter = "p",p=0.05,sample_hclust = F,variable_hclust_number = 2)
enrichments_ANOVA<-romicsEnrichement(romics_TMT,cluster_filter = "hclust_clusters")
enrichments_ANOVA_filtered<-enrichments_ANOVA[enrichments_ANOVA$pval<0.1&enrichments_ANOVA$fold_change>1,]
datatable(enrichments_ANOVA)
write.csv(enrichments_ttest_severe_vs_control_filtered,file = "03_output_files/enrichments_ttest_severe_vs_control_filtered.csv")
romicsVolcano(romics_TMT)
romicsVolcano(romics_TMT)
romicsVolcano(romics_TMT,min_fold_change = 0)
romicsVolcano(romics_TMT,min_fold_change = 0)
singleVariablePlot(romics_TMT,variable = "P08174",title = "CD55")
singleVariablePlot(romics_TMT,variable = "Q15109",title = "AGER")
singleVariablePlot(romics_TMT,variable = "P62736",title = "ACTA2")
singleVariablePlot(romics_TMT,variable = "P08670",title = "Vimentin")
singleVariablePlot(romics_TMT,variable = "P02452",title = "Collagen 1ɑ1")
View(MaxQuant_IDs)
p<-list()
IDS<-MaxQuant_IDs$majority.protein.ids[grepl("Collagen",MaxQuant_IDs$fasta.headers)]
desc<-MaxQuant_IDs$fasta.headers[grepl("Collagen",MaxQuant_IDs$fasta.headers)]
desc<-gsub(".*|","",desc)
desc<-MaxQuant_IDs$fasta.headers[grepl("Collagen",MaxQuant_IDs$fasta.headers)]
desc<-sub(".*\\|","",desc)
desc<-sub("\\ .*","",desc)
variable<-IDS
title<-desc
p<-list()
i<-
1
p[i]<-singleVariablePlot(romics_object=romics_object,variable=variable[i],type=type,factor=factor,limits=limits,title=title[i])
romics_object<-romics_TMT
p[i]<-singleVariablePlot(romics_object=romics_object,variable=variable[i],type=type,factor=factor,limits=limits,title=title[i])
type = "jb"
factor="main"
limits=c(-10,10)
factor="main"
p[i]<-singleVariablePlot(romics_object=romics_object,variable=variable[i],type=type,factor=factor,limits=limits,title=title[i])
p
plot(p)
print(singleVariablePlot(romics_object=romics_object,variable=variable[i],type=type,factor=factor,limits=limits,title=title[i]))
multipleVariablePlot<-function(romics_object, variable="variable", type = "jb", factor="main", limits=c(-10,10), title="auto"){
for(i in 1:length(variable)){
print(singleVariablePlot(romics_object=romics_object,variable=variable[i],type=type,factor=factor,limits=limits,title=title[i]))
}
}
i<-2
print(singleVariablePlot(romics_object=romics_object,variable=variable[i],type=type,factor=factor,limits=limits,title=title[i]))
i<-3
print(singleVariablePlot(romics_object=romics_object,variable=variable[i],type=type,factor=factor,limits=limits,title=title[i]))
multipleVariablePlot<-function(romics_object, variable="variable", type = "jb", factor="main", limits=c(-10,10), title="auto"){
for(i in 1:length(variable)){
print(singleVariablePlot(romics_object=romics_object,variable=variable[i],type=type,factor=factor,limits=limits,title=title[i]))
}
}
remove("limits")
print(singleVariablePlot(romics_object=romics_object,variable=variable[i],type=type,factor=factor,limits=limits,title=title[i]))
multipleVariablePlot<-function(romics_object, variable="variable", title="auto",...){
if(!is.romics_object(romics_object) | missing(romics_object)) {stop("romics_object is missing or is not in the appropriate format")}
if(!type %in% c("jitter", "boxplot", "violin", "jb", "jv")){stop("type has to be in 'jitter','boxplot','violin','jb',or 'jv')")}
if(missing(factor)){factor="main"}
if(factor=="main"){factor=romics_object$main_factor}
if(!factor %in% romicsFactorNames(romics_object)){
print("the chosen <factor> is not in the list of factor for the selected romics object, this list comprises:")
print(romicsFactorNames(romics_object))
stop()
}
if(!is.character(variable)&length(variable!=1)){stop("<variable> should be a character vector of lenght 1")}
if(missing(title)){title="auto"}
for(i in 1:length(variable)){
print(singleVariablePlot(romics_object=romics_object,...))
}
}
multipleVariablePlot(romics_TMT,variable = IDS,title = desc)
multipleVariablePlot<-function(romics_object, variable="variable", title="auto",...){
if(!is.character(variable)){stop("<variable> should be a character vector")}
if(missing(title)){title="auto"}
for(i in 1:length(variable)){
print(singleVariablePlot(romics_object=romics_object,...))
}
}
multipleVariablePlot(romics_TMT,variable = IDS,title = desc)
multipleVariablePlot(romics_TMT,variable = IDS[1:3],title = desc[1:3])
multipleVariablePlot(romics_TMT,variable = IDS[1:2],title = desc[1:2])
IDs<-c("P08174","Q15109","P62736")
desc<-c("CD55","AGER","ACTA2")
multipleVariablePlot(romics_TMT,variable = IDS[1:2],title = desc[1:2])
singleVariablePlot(romics_TMT,variable = "P08174",title = "CD55")
IDs[1]
IDS[1]
multipleVariablePlot(romics_TMT,variable = IDs,title = desc)
singleVariablePlot(romics_TMT,variable = "A6NMZ7",title = "Collagen alpha-6(VI) chain")
singleVariablePlot(romics_TMT,variable = "A8TX70",title = "Collagen alpha-5(VI) chain")
singleVariablePlot(romics_TMT,variable = "P08253",title = "MMP2")
singleVariablePlot(romics_TMT,variable = "P22894",title = "MMP8")
singleVariablePlot(romics_TMT,variable = "P14780",title = "MMP9")
singleVariablePlot(romics_TMT,variable = "O00469",title = "Procollagen-lysine,2-oxoglutarate 5-dioxygenase 2")
singleVariablePlot(romics_TMT,variable = "O60568",title = "Procollagen-lysine,2-oxoglutarate 5-dioxygenase 3")
singleVariablePlot(romics_TMT,variable = "P02452",title = "Collagen alpha-1(I) chain")
singleVariablePlot(romics_TMT,variable = "P02458",title = "Collagen alpha-1(II) chain;Collagen alpha-1(II) chain;Chondrocalcin")
singleVariablePlot(romics_TMT,variable = "P02461",title = "Collagen alpha-1(III) chain")
singleVariablePlot(romics_TMT,variable = "P02462",title = "Collagen alpha-1(IV) chain;Arresten")
singleVariablePlot(romics_TMT,variable = "P05997",title = "Collagen alpha-2(V) chain")
singleVariablePlot(romics_TMT,variable = "P08123",title = "Collagen alpha-2(I) chain")
singleVariablePlot(romics_TMT,variable = "P08572",title = "72 kDa type IV collagenase;PEX")
singleVariablePlot(romics_TMT,variable = "P08123",title = "Collagen alpha-2(I) chain")
singleVariablePlot(romics_TMT,variable = "P12109",title = "Collagen alpha-2(IV) chain;Canstatin")
singleVariablePlot(romics_TMT,variable = "P12110",title = "Collagen alpha-1(VI) chain")
singleVariablePlot(romics_TMT,variable = "P12111",title = "Collagen alpha-2(VI) chain")
singleVariablePlot(romics_TMT,variable = "P20849",title = "Collagen alpha-3(VI) chain")
singleVariablePlot(romics_TMT,variable = "P20908",title = "Collagen alpha-1(IX) chain")
singleVariablePlot(romics_TMT,variable = "P22894",title = "Collagen alpha-1(V) chain")
singleVariablePlot(romics_TMT,variable = "P25940",title = "Neutrophil collagenase")
singleVariablePlot(romics_TMT,variable = "P29400",title = "Collagen alpha-1(VIII) chain;Vastatin")
singleVariablePlot(romics_TMT,variable = "P39059",title = "Collagen alpha-5(IV) chain")
singleVariablePlot(romics_TMT,variable = "P39060",title = "Collagen alpha-1(XV) chain;Restin;Restin-2;Restin-3;Restin-4")
singleVariablePlot(romics_TMT,variable = "P53420",title = "Collagen alpha-1(XVIII) chain;Endostatin")
singleVariablePlot(romics_TMT,variable = "Q01955",title = "Collagen alpha-4(IV) chain")
singleVariablePlot(romics_TMT,variable = "Q02809",title = "Collagen alpha-1(VII) chain")
singleVariablePlot(romics_TMT,variable = "Q05707",title = "Procollagen-lysine,2-oxoglutarate 5-dioxygenase 1")
singleVariablePlot(romics_TMT,variable = "Q07092",title = "Collagen alpha-1(XIV) chain")
singleVariablePlot(romics_TMT,variable = "Q14031",title = "Collagen alpha-1(XVI) chain")
singleVariablePlot(romics_TMT,variable = "A6NMZ7",title = "Collagen alpha-6(VI) chain")
singleVariablePlot(romics_TMT,variable = "A8TX70",title = "Collagen alpha-5(VI) chain")
singleVariablePlot(romics_TMT,variable = "O00469",title = "Procollagen-lysine,2-oxoglutarate 5-dioxygenase 2")
singleVariablePlot(romics_TMT,variable = "O60568",title = "Procollagen-lysine,2-oxoglutarate 5-dioxygenase 3")
singleVariablePlot(romics_TMT,variable = "P02452",title = "Collagen alpha-1(I) chain")
singleVariablePlot(romics_TMT,variable = "P02458",title = "Collagen alpha-1(II) chain;Collagen alpha-1(II) chain;Chondrocalcin")
singleVariablePlot(romics_TMT,variable = "P02461",title = "Collagen alpha-1(III) chain")
singleVariablePlot(romics_TMT,variable = "P02462",title = "Collagen alpha-1(IV) chain;Arresten")
singleVariablePlot(romics_TMT,variable = "P05997",title = "Collagen alpha-2(V) chain")
singleVariablePlot(romics_TMT,variable = "P08123",title = "Collagen alpha-2(I) chain")
singleVariablePlot(romics_TMT,variable = "P12109",title = "Collagen alpha-2(IV) chain;Canstatin")
singleVariablePlot(romics_TMT,variable = "P12110",title = "Collagen alpha-1(VI) chain")
singleVariablePlot(romics_TMT,variable = "P12111",title = "Collagen alpha-2(VI) chain")
singleVariablePlot(romics_TMT,variable = "P20849",title = "Collagen alpha-3(VI) chain")
singleVariablePlot(romics_TMT,variable = "P20908",title = "Collagen alpha-1(IX) chain")
singleVariablePlot(romics_TMT,variable = "P22894",title = "Collagen alpha-1(V) chain")
singleVariablePlot(romics_TMT,variable = "P27658",title = "Collagen alpha-3(V) chain")
singleVariablePlot(romics_TMT,variable = "P29400",title = "Collagen alpha-1(VIII) chain;Vastatin")
singleVariablePlot(romics_TMT,variable = "P39059",title = "Collagen alpha-5(IV) chain")
singleVariablePlot(romics_TMT,variable = "P39060",title = "Collagen alpha-1(XV) chain;Restin;Restin-2;Restin-3;Restin-4")
singleVariablePlot(romics_TMT,variable = "P53420",title = "Collagen alpha-1(XVIII) chain;Endostatin")
singleVariablePlot(romics_TMT,variable = "Q01955",title = "Collagen alpha-4(IV) chain")
singleVariablePlot(romics_TMT,variable = "Q02388",title = "Collagen alpha-3(IV) chain;Tumstatin")
singleVariablePlot(romics_TMT,variable = "Q02809",title = "Collagen alpha-1(VII) chain")
singleVariablePlot(romics_TMT,variable = "Q05707",title = "Procollagen-lysine,2-oxoglutarate 5-dioxygenase 1")
singleVariablePlot(romics_TMT,variable = "Q14031",title = "Collagen alpha-1(XVI) chain")
singleVariablePlot(romics_TMT,variable = "Q14055",title = "Collagen alpha-6(IV) chain")
singleVariablePlot(romics_TMT,variable = "P02452",title = "Collagen alpha-1(I) chain")
singleVariablePlot(romics_TMT,variable = "P08253",title = "MMP2")
singleVariablePlot(romics_TMT,variable = "P22894",title = "MMP8")
singleVariablePlot(romics_TMT,variable = "P14780",title = "MMP9")
singleVariablePlot(romics_TMT,variable = "P25940",title = "Neutrophil collagenase")
View(enrichments_ttest_severe_vs_control_filtered)
singleVariablePlot(romics_TMT,variable = "P08174",title = "CD55")
singleVariablePlot(romics_TMT,variable = "Q15109",title = "AGER")
singleVariablePlot(romics_TMT,variable = "P62736",title = "ACTA2")
singleVariablePlot(romics_TMT,variable = "P08670",title = "Vimentin")
singleVariablePlot(romics_TMT,variable = "Q9UQV4",title = "LAMP3")
singleVariablePlot(romics_TMT,variable = "P11684",title = "Uteroglobin (airway)")
singleVariablePlot(romics_TMT,variable = "P04216",title = "THY1 (Matrix Fibroblast 2)")
singleVariablePlot(romics_TMT,variable ="P02647",title = "APOA1")
singleVariablePlot(romics_TMT,variable ="P06727",title = "APOA4")
singleVariablePlot(romics_TMT,variable ="Q07954",title= "low-density lipoprotein receptor-related protein 1")
singleVariablePlot(romics_TMT,variable = "P02452",title = "Collagen alpha-1(I) chain")
singleVariablePlot(romics_TMT,variable = "P08253",title = "MMP2")
singleVariablePlot(romics_TMT,variable = "P22894",title = "MMP8")
singleVariablePlot(romics_TMT,variable = "P14780",title = "MMP9")
singleVariablePlot(romics_TMT,variable = "P25940",title = "Neutrophil collagenase")
devtools::install()
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/05 - Lungmap/11 - BPD Rochester/TMT MaxQuant/")
library(RomicsProcessor)
library(proteinminion)
library(DT)
UniProtTable<-read.csv("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2021_08_03.csv")
UniProtTable_GO<-read.csv(file="./03_output_files/UniProtTable_GO.csv")
UniProtTable_KEGG<-read.csv(file="./03_output_files/UniProtTable_KEGG.csv")
data_TMT<-extractMaxQuant(file = "./01_source_files/proteinGroups.txt",quantification_type = "TMT")
MaxQuant_IDs<-extractMaxQuantIDs(file = "./01_source_files/proteinGroups.txt")
metadata<-read.csv("01_source_files/metadata.csv")
colnames(metadata)<-gsub("^X","",colnames(metadata))
romics_TMT<-romicsCreateObject(data_TMT,metadata,main_factor = "Disease_status")
romics_TMT<-romicsSampleNameFromFactor(romics_TMT,factor = "Sample_name")
romics_TMT<-romicsZeroToMissing(romics_TMT)
romics_TMT<-log2transform(romics_TMT)
distribBoxplot(romics_TMT)
romics_TMT<-romicsSubset(romics_TMT,subset = c("Empty"),type = "drop",by = "level",factor = "Disease_status")
distribBoxplot(romics_TMT)
romics_TMT<-medianNormSample(romics_TMT)
distribBoxplot(romics_TMT)
romicsPlotMissing(romics_TMT)
romics_TMT<-romicsFilterMissing(romics_TMT,percentage_completeness = 70,main_factor = "main")
romicsPlotMissing(romics_TMT)
romicsHclust(romics_TMT)
imputeMissingEval(romics_TMT,bin=0.5,nb_stdev = 1.8,width_stdev = 1)
romics_TMT<-imputeMissing(romics_TMT,nb_stdev = 2,width_stdev = 0.5)
#PCA plot prior batch effect correction
pca_results<-romicsPCA(romics_TMT)
indPCAplot(romics_TMT,plotType = "individual",label = T)
indPCAplot(romics_TMT,plotType = "individual",label = T,Xcomp = 2,Ycomp = 3, ncp=5)
indPCA3D(romics_TMT)
romics_TMT<-romicsMean(romics_TMT)
romics_TMT<-romicsSd(romics_TMT)
romics_TMT<-romicsZscores(romics_TMT)
romics_TMT<-romicsTtest(romics_TMT)
romics_TMT<-romicsANOVA(romics_TMT)
pFrequencyPlot(romics_TMT)
romicsHeatmap(romics_TMT, ANOVA_filter = "p",p=0.05,sample_hclust = F,variable_hclust_number = 2)
romics_TMT<-romicsVariableHclust(romics_TMT,clusters = 2,plot=F, ANOVA_filter = "p",p = 0.05)
enrichments_ANOVA<-romicsEnrichement(romics_TMT,cluster_filter = "hclust_clusters")
enrichments_ANOVA_filtered<-enrichments_ANOVA[enrichments_ANOVA$pval<0.1&enrichments_ANOVA$fold_change>1,]
datatable(enrichments_ANOVA)
write.csv(enrichments_ANOVA_filtered,file = "03_output_files/enrichments_ANOVA_filtered.csv")
romicsVolcano(romics_TMT,min_fold_change = 0)
up_in_Severe_vs_control<-rownames(romics_TMT$statistics)[romics_TMT$statistics$Severe_vs_ctrl_Ttest_p<0.05&romics_TMT$statistics$`log(Severe/ctrl)`>0]
down_in_Severe_vs_control<-rownames(romics_TMT$statistics)[romics_TMT$statistics$Severe_vs_ctrl_Ttest_p<0.05&romics_TMT$statistics$`log(Severe/ctrl)`<0]
universe<-rownames(romics_TMT$statistics)
up_in_Severe_vs_control_GO<-cbind(type="up_in_severe",UniProt_GO_EASE(up_in_Severe_vs_control,universe))
up_in_Severe_vs_control_KEGG<-cbind(type="up_in_severe",UniProt_KEGG_EASE(up_in_Severe_vs_control,universe))
down_in_Severe_vs_control_GO<-cbind(type="down_in_severe",UniProt_GO_EASE(down_in_Severe_vs_control,universe))
down_in_Severe_vs_control_KEGG<-cbind(type="down_in_severe",UniProt_KEGG_EASE(down_in_Severe_vs_control,universe))
enrichments_ttest_severe_vs_control<-rbind(up_in_Severe_vs_control_GO,up_in_Severe_vs_control_KEGG,down_in_Severe_vs_control_GO,down_in_Severe_vs_control_KEGG)
enrichments_ttest_severe_vs_control_filtered<-enrichments_ttest_severe_vs_control[enrichments_ttest_severe_vs_control$pval&enrichments_ttest_severe_vs_control$fold_change>0,]
datatable(enrichments_ttest_severe_vs_control_filtered)
write.csv(enrichments_ttest_severe_vs_control_filtered,file = "03_output_files/enrichments_ttest_severe_vs_control_filtered.csv")
singleVariablePlot(romics_TMT,variable = "P08174",title = "CD55")
singleVariablePlot(romics_TMT,variable = "Q15109",title = "AGER")
singleVariablePlot(romics_TMT,variable = "P62736",title = "ACTA2")
singleVariablePlot(romics_TMT,variable = "P08670",title = "Vimentin")
singleVariablePlot(romics_TMT,variable = "Q9UQV4",title = "LAMP3")
singleVariablePlot(romics_TMT,variable = "P11684",title = "Uteroglobin (airway)")
singleVariablePlot(romics_TMT,variable = "P04216",title = "THY1 (Matrix Fibroblast 2)")
singleVariablePlot(romics_TMT,variable ="P02647",title = "APOA1")
singleVariablePlot(romics_TMT,variable ="P06727",title = "APOA4")
singleVariablePlot(romics_TMT,variable ="Q07954",title= "low-density lipoprotein receptor-related protein 1")
singleVariablePlot(romics_TMT,variable = "P02452",title = "Collagen alpha-1(I) chain")
singleVariablePlot(romics_TMT,variable = "P08253",title = "MMP2")
singleVariablePlot(romics_TMT,variable = "P22894",title = "MMP8")
singleVariablePlot(romics_TMT,variable = "P14780",title = "MMP9")
singleVariablePlot(romics_TMT,variable = "P25940",title = "Neutrophil collagenase")
results<-romicsExportData(romics_TMT,statistics = T,missing_data = T)
write.csv(results, file="results_with_stat.csv")
colnames(IDs)
colnames(MaxQuant_IDs)
results<-merge(MaxQuant_IDs,results,by.x="protein.ids",by.y=0)
View(results)
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https:/cloud.r-project.org/")))
setwd("~/Documents/28 - Aging Lung/04_AgLung_M_missing_imputed/")
library("RomicsProcessor")
library("DT") #for the rendering of the enrichment tables
# Load the modification table
data<-read.csv(file="./01_source_files/Metabolomics.csv")
colnames(data)<-gsub(".*\\_","",colnames(data))
colnames(data)[1]<-"ID"
# The metadata is loaded
metadata<- read.csv(file = "./01_source_files/metadata.csv")
colnames(metadata)[1]<-"ID"
metadata<-metadata[,colnames(metadata) %in% colnames(data)]
romics_metab<- romicsCreateObject(data,metadata,main_factor = "Treatment")
romics_metab<- romicsSampleNameFromFactor(romics_metab,factor =  metadata[4,1])
devtools:: install()
