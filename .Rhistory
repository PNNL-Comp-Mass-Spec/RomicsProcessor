options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/06 - Fun-GCAT/02 - Tissue proteomics/02 - Perin alport mice higher loading/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("Mus_musculus_proteome_up000000589_2020_07_13.fasta")){
download_UniProtFasta(proteomeID = "up000000589", reviewed = F, export=T, file="Mus_musculus_proteome_up000000589_2020_07_13.fasta")
}
UniProtFasta_info<-UniprotFastaParser(file = "Mus_musculus_proteome_up000000589_2020_07_13.fasta")
if(file.exists("UniprotTable_Mus_musculus_proteome_up000000589_2020_07_13.csv")){
UniProtTable<-read.csv("UniprotTable_Mus_musculus_proteome_up000000589_2020_07_13.csv")
}else{
download_UniProtTable(proteomeID = "up000000589", reviewed = F)
write.csv(UniProtTable,("UniprotTable_Mus_musculus_proteome_up000000589_2020_07_13.csv"),row.names=FALSE)
}
if(file.exists("UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="UniProtTable_KEGG.csv",row.names=FALSE)
}
data<-extractMaxQuant("proteinGroups.txt",quantification_type = "iBAQ",cont.rm = T,site.rm = T,rev.rm = T)
IDsdetails<-extractMaxQuantIDs("proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
IDsdetails<-cbind(UniProt_Name=sub(".*\\|","",IDsdetails$protein.ids), IDsdetails)
colnames(data)<- sub("iBAQ.","",colnames(data))
data[,1]<- sub(".*\\|","",data[,1])
metadata<- read.csv(file = "metadata.csv")
colnames(metadata)<-tolower(colnames(metadata))
romics_proteins<- romicsCreateObject(data, metadata,main_factor = "Condition")
romics_proteins<- romicsZeroToMissing(romics_proteins)
romicsPlotMissing(romics_proteins)
romics_proteins_noapc<-romicsSubset(romics_proteins,subset_vector = "A_G1_APC",type = "drop",by = "level",factor = "Condition")
romics_proteins<-romicsFilterMissing(romics_proteins,percentage_completeness = 60)
print(paste0(nrow(romics_proteins$data),"/", nrow(romics_proteins$original_data)," proteins remained after filtering", " (",round(nrow(romics_proteins$data)/nrow(romics_proteins$original_data)*100,2),"%)."))
romicsPlotMissing(romics_proteins)
romics_proteins<-log2transform(romics_proteins)
distribBoxplot(romics_proteins)
romics_proteins<-medianCenterSample(romics_proteins)
distribBoxplot(romics_proteins)
indPCAplot(romics_proteins, ncp=5,plotType = "percentage")
indPCAplot(romics_proteins, ncp=5,plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_proteins, ncp=5, plotType = "individual",Xcomp=2,Ycomp =3)
imputeMissingEval(romics_proteins,nb_stdev = 2,width_stdev = 0.5, bin=1)
romics_proteins<-imputeMissing(romics_proteins,nb_stdev = 2,width_stdev = 0.5)
romicsHclust(romics_proteins)
indPCAplot(romics_proteins, plotType = "percentage")
indPCAplot(romics_proteins, plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_proteins,  plotType = "individual",Xcomp=2,Ycomp =3)
romics_proteins<-romicsMean(romics_proteins)
romics_proteins<-romicsSd(romics_proteins)
romics_proteins<-romicsANOVA(romics_proteins)
print(paste0(sum(romics_proteins$statistics$ANOVA_p<0.05), " proteins had an ANOVA p<0.05."))
print(paste0(sum(romics_proteins$statistics$ANOVA_padj<0.05), " proteins had an ANOVA padjusted<0.05."))
romicsHeatmap(romics_proteins,variable_hclust_number = 5,ANOVA_filter = "p", p=0.05,sample_hclust = F)
export_stats<-romicsExportData(romics_proteins,statistics = T,missing_data = T)
export_stats<-cbind(UniProt_Name=rownames(export_stats),export_stats)
export_stats<-merge(export_stats,IDsdetails,by="UniProt_Name")
write.csv(export_stats,file, "all_results_with_stats.csv")
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/08 - DARPA friends/DARPA_FF_Ecoli/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("Ecoli_proteome_up000000625_2020_08_16.fasta")){
download_UniProtFasta(proteomeID = "up000000625", reviewed = F, export=T, file="Ecoli_proteome_up000000625_2020_08_16.fasta")
}
UniProtFasta_info<-UniprotFastaParser(file = "Ecoli_proteome_up000000625_2020_08_16.fasta")
if(file.exists("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv")){
UniProtTable<-read.csv("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv")
}else{
download_UniProtTable(proteomeID = "up000000625", reviewed = F)
write.csv(UniProtTable,("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv"),row.names=FALSE)
}
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/08 - DARPA friends/DARPA_FF_Ecoli/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("Ecoli_proteome_up000000625_2020_08_16.fasta")){
download_UniProtFasta(proteomeID = "up000000625", reviewed = F, export=T, file="Ecoli_proteome_up000000625_2020_08_16.fasta")
}
UniProtFasta_info<-UniprotFastaParser(file = "Ecoli_proteome_up000000625_2020_08_16.fasta")
if(file.exists("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv")){
UniProtTable<-read.csv("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv")
}else{
download_UniProtTable(proteomeID = "up000000625", reviewed = F)
write.csv(UniProtTable,("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv"),row.names=FALSE)
}
read.csv(file = "Cluster1.csv")
read.csv("Cluster1.csv")
Clust1<-read.csv(file="Cluster1.csv")
View(Clust1)
Clust1<-as.character(read.csv(file="Cluster1.csv"))
Clust1
Clust1<-read.csv(file="Cluster1.csv")
Clust1
Clust1[1]
Clust1[1,]
t(Clust1)
as.character(t(Clust1))
Clust1<-as.character(t(read.csv(file="Cluster1.csv"))
Clust1<-as.character(t(read.csv(file="Cluster1.csv")))
Clust1<-as.character(t(read.csv(file="Cluster1.csv")))
Clust2<-as.character(t(read.csv(file="Cluster2.csv")))
Clust3<-as.character(t(read.csv(file="Cluster3.csv")))
Clust4<-as.character(t(read.csv(file="Cluster4.csv")))
Clust5<-as.character(t(read.csv(file="Cluster5.csv")))
Universe<-as.character(t(read.csv(file="Universe.csv")))
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/06 - Fun-GCAT/02 - Tissue proteomics/02 - Perin alport mice higher loading/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("Mus_musculus_proteome_up000000589_2020_07_13.fasta")){
download_UniProtFasta(proteomeID = "up000000589", reviewed = F, export=T, file="Mus_musculus_proteome_up000000589_2020_07_13.fasta")
}
UniProtFasta_info<-UniprotFastaParser(file = "Mus_musculus_proteome_up000000589_2020_07_13.fasta")
if(file.exists("UniprotTable_Mus_musculus_proteome_up000000589_2020_07_13.csv")){
UniProtTable<-read.csv("UniprotTable_Mus_musculus_proteome_up000000589_2020_07_13.csv")
}else{
download_UniProtTable(proteomeID = "up000000589", reviewed = F)
write.csv(UniProtTable,("UniprotTable_Mus_musculus_proteome_up000000589_2020_07_13.csv"),row.names=FALSE)
}
if(file.exists("UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="UniProtTable_KEGG.csv",row.names=FALSE)
}
Clust1_E<-UniProt_GO_Fisher(Clust1,Universe)
View(Clust1_E)
Clust1_E<-UniProt_GO_Fisher(Clust1,Universe)
Clust2_E<-UniProt_GO_Fisher(Clust2,Universe)
Clust3_E<-UniProt_GO_Fisher(Clust3,Universe)
Clust4_E<-UniProt_GO_Fisher(Clust4,Universe)
Clust5_E<-UniProt_GO_Fisher(Clust5,Universe)
View(Clust5_E)
Clust1_GO<-cbind(Cluster=1, UniProt_GO_Fisher(Clust1,Universe))
View(Clust1_GO)
Clust1_GO<-cbind(Cluster=1, UniProt_GO_Fisher(Clust1,Universe))
Clust2_GO<-cbind(Cluster=2, UniProt_GO_Fisher(Clust2,Universe))
Clust3_GO<-cbind(Cluster=3, UniProt_GO_Fisher(Clust3,Universe))
Clust4_GO<-cbind(Cluster=4, UniProt_GO_Fisher(Clust4,Universe))
Clust5_GO<-cbind(Cluster=5, UniProt_GO_Fisher(Clust5,Universe))
View(Clust1_GO)
Clust1_KEGG<-cbind(Cluster=1, UniProt_KEGG_Fisher(Clust1,Universe))
Clust1_KEGG<-cbind(Cluster=1, UniProt_KEGG_Fisher(Clust1,Universe))
Clust2_KEGG<-cbind(Cluster=2, UniProt_KEGG_Fisher(Clust2,Universe))
Clust3_KEGG<-cbind(Cluster=3, UniProt_KEGG_Fisher(Clust3,Universe))
Clust4_KEGG<-cbind(Cluster=4, UniProt_KEGG_Fisher(Clust4,Universe))
Clust5_KEGG<-cbind(Cluster=5, UniProt_KEGG_Fisher(Clust5,Universe))
Enrichment_clusters<-rbind(Clust1_GO,Clust2_GO,Clust3_GO,Clust4_GO,Clust5_GO,Clust1_KEGG,Clust2_KEGG,Clust3_KEGG,Clust4_KEGG,Clust5_KEGG)
Enrichment_clusters<-Enrichment_clusters[Enrichment_clusters$pval<0.1,Enrichment_clusters$fold_change>1]
Enrichment_clusters<-Enrichment_clusters[Enrichment_clusters$pval<0.1 & Enrichment_clusters$fold_change>1,]
View(Enrichment_clusters)
write.csv(Enrichment_clusters,file= "Enrichment_clusters.csv")
write.table(Enrichment_clusters,file= "Enrichment_clusters.txt",sep="\t")
A_G1_vs_A_G0_high_in_A_G1<-as.character(t(read.csv("A_G1_vs_A_G0_high_in_A_G1.csv")))
A_G1_vs_A_G0_low_in_A_G1<-as.character(t(read.csv("A_G1_vs_A_G0_low_in_A_G1.csv")))
A_G1_vs_A_G0_changing<-as.character(t(read.csv("A_G1_vs_A_G0_changing.csv")))
WT_G0_vs_A_G0_high_in_WT_G0<-as.character(t(read.csv("WT_G0_vs_A_G0_high_in_WT_G0.csv")))
WT_G0_vs_A_G0_low_in_WT_G0<-as.character(t(read.csv("WT_G0_vs_A_G0_low_in_WT_G0.csv")))
WT_G0_vs_A_G0_changing<-as.character(t(read.csv("WT_G0_vs_A_G0_changing.csv")))
WT_G0_vs_A_G1_high_in_WT_G0<-as.character(t(read.csv("WT_G0_vs_A_G1_high_in_WT_G0.csv")))
WT_G0_vs_A_G1_low_in_WT_G0<-as.character(t(read.csv("WT_G0_vs_A_G1_low_in_WT_G0.csv")))
WT_G0_vs_A_G1_changing<-as.character(t(read.csv("WT_G0_vs_A_G1_changing.csv")))
Universe_groups<-as.character(t(read.csv("Universe_groups.csv")))
A_G1_vs_A_G0_high_in_A_G1_GO<-cbind(Cluster="A_G1_vs_A_G0_high_in_A_G1", UniProt_GO_Fisher(A_G1_vs_A_G0_high_in_A_G1,Universe))
A_G1_vs_A_G0_high_in_A_G1<-as.character(t(read.csv("A_G1_vs_A_G0_high_in_A_G1.csv")))
A_G1_vs_A_G0_low_in_A_G1<-as.character(t(read.csv("A_G1_vs_A_G0_low_in_A_G1.csv")))
A_G1_vs_A_G0_changing<-as.character(t(read.csv("A_G1_vs_A_G0_changing.csv")))
WT_G0_vs_A_G0_high_in_WT_G0<-as.character(t(read.csv("WT_G0_vs_A_G0_high_in_WT_G0.csv")))
WT_G0_vs_A_G0_low_in_WT_G0<-as.character(t(read.csv("WT_G0_vs_A_G0_low_in_WT_G0.csv")))
WT_G0_vs_A_G0_changing<-as.character(t(read.csv("WT_G0_vs_A_G0_changing.csv")))
WT_G0_vs_A_G1_high_in_WT_G0<-as.character(t(read.csv("WT_G0_vs_A_G1_high_in_WT_G0.csv")))
WT_G0_vs_A_G1_low_in_WT_G0<-as.character(t(read.csv("WT_G0_vs_A_G1_low_in_WT_G0.csv")))
WT_G0_vs_A_G1_changing<-as.character(t(read.csv("WT_G0_vs_A_G1_changing.csv")))
Universe_groups<-as.character(t(read.csv("Universe_groups.csv")))
A_G1_vs_A_G0_high_in_A_G1_GO<-cbind(Cluster="A_G1_vs_A_G0_high_in_A_G1", UniProt_GO_Fisher(A_G1_vs_A_G0_high_in_A_G1,Universe))
A_G1_vs_A_G0_low_in_A_G1_GO<-cbind(Cluster="A_G1_vs_A_G0_low_in_A_G1", UniProt_GO_Fisher(A_G1_vs_A_G0_low_in_A_G1,Universe))
A_G1_vs_A_G0_changing_GO<-cbind(Cluster="A_G1_vs_A_G0_changing", UniProt_GO_Fisher(A_G1_vs_A_G0_changing,Universe))
WT_G0_vs_A_G0_high_in_WT_G0_GO<-cbind(Cluster="WT_G0_vs_A_G0_high_in_WT_G0", UniProt_GO_Fisher(WT_G0_vs_A_G0_high_in_WT_G0,Universe))
WT_G0_vs_A_G0_low_in_WT_G0_GO<-cbind(Cluster="WT_G0_vs_A_G0_low_in_WT_G0", UniProt_GO_Fisher(WT_G0_vs_A_G0_low_in_WT_G0,Universe))
WT_G0_vs_A_G0_changing_GO<-cbind(Cluster="WT_G0_vs_A_G0_changing", UniProt_GO_Fisher(WT_G0_vs_A_G0_changing,Universe))
WT_G0_vs_A_G1_high_in_WT_G0_GO<-cbind(Cluster="WT_G0_vs_A_G1_high_in_WT_G0", UniProt_GO_Fisher(WT_G0_vs_A_G1_high_in_WT_G0,Universe))
WT_G0_vs_A_G1_low_in_WT_G0_GO<-cbind(Cluster="WT_G0_vs_A_G1_low_in_WT_G0", UniProt_GO_Fisher(WT_G0_vs_A_G1_low_in_WT_G0,Universe))
WT_G0_vs_A_G1_changing_GO<-cbind(Cluster="WT_G0_vs_A_G1_changing", UniProt_GO_Fisher(WT_G0_vs_A_G1_changing,Universe))
A_G1_vs_A_G0_high_in_A_G1_KEGG<-cbind(Cluster="A_G1_vs_A_G0_high_in_A_G1", UniProt_KEGG_Fisher(A_G1_vs_A_G0_high_in_A_G1,Universe))
A_G1_vs_A_G0_low_in_A_G1_KEGG<-cbind(Cluster="A_G1_vs_A_G0_low_in_A_G1", UniProt_KEGG_Fisher(A_G1_vs_A_G0_low_in_A_G1,Universe))
A_G1_vs_A_G0_changing_KEGG<-cbind(Cluster="A_G1_vs_A_G0_changing", UniProt_KEGG_Fisher(A_G1_vs_A_G0_changing,Universe))
WT_G0_vs_A_G0_high_in_WT_G0_KEGG<-cbind(Cluster="WT_G0_vs_A_G0_high_in_WT_G0", UniProt_KEGG_Fisher(WT_G0_vs_A_G0_high_in_WT_G0,Universe))
WT_G0_vs_A_G0_low_in_WT_G0_KEGG<-cbind(Cluster="WT_G0_vs_A_G0_low_in_WT_G0", UniProt_KEGG_Fisher(WT_G0_vs_A_G0_low_in_WT_G0,Universe))
WT_G0_vs_A_G0_changing_KEGG<-cbind(Cluster="WT_G0_vs_A_G0_changing", UniProt_KEGG_Fisher(WT_G0_vs_A_G0_changing,Universe))
WT_G0_vs_A_G1_high_in_WT_G0_KEGG<-cbind(Cluster="WT_G0_vs_A_G1_high_in_WT_G0", UniProt_KEGG_Fisher(WT_G0_vs_A_G1_high_in_WT_G0,Universe))
WT_G0_vs_A_G1_low_in_WT_G0_KEGG<-cbind(Cluster="WT_G0_vs_A_G1_low_in_WT_G0", UniProt_KEGG_Fisher(WT_G0_vs_A_G1_low_in_WT_G0,Universe))
WT_G0_vs_A_G1_changing_KEGG<-cbind(Cluster="WT_G0_vs_A_G1_changing", UniProt_KEGG_Fisher(WT_G0_vs_A_G1_changing,Universe))
Enrichments_Groups<-rbind(A_G1_vs_A_G0_high_in_A_G1_GO,A_G1_vs_A_G0_low_in_A_G1_GO,A_G1_vs_A_G0_changing_GO,
WT_G0_vs_A_G0_high_in_WT_G0_GO,WT_G0_vs_A_G0_low_in_WT_G0_GO,WT_G0_vs_A_G0_changing_GO,
WT_G0_vs_A_G1_high_in_WT_G0_GO,WT_G0_vs_A_G1_low_in_WT_G0_GO, WT_G0_vs_A_G1_changing_GO,
A_G1_vs_A_G0_high_in_A_G1_KEGG,A_G1_vs_A_G0_low_in_A_G1_KEGG,A_G1_vs_A_G0_changing_KEGG,
WT_G0_vs_A_G0_high_in_WT_G0_KEGG,WT_G0_vs_A_G0_low_in_WT_G0_KEGG,WT_G0_vs_A_G0_changing_KEGG,
WT_G0_vs_A_G1_high_in_WT_G0_KEGG,WT_G0_vs_A_G1_low_in_WT_G0_KEGG, WT_G0_vs_A_G1_changing_KEGG)
Enrichments_Groups<-Enrichments_Groups[Enrichments_Groups$pval<0.05 & Enrichments_Groups$fold_change>1,]
Enrichments_Groups<-Enrichments_Groups[Enrichments_Groups$pval<0.05 & Enrichments_Groups$fold_change>1,]
Enrichments_Groups<-Enrichments_Groups[Enrichments_Groups$pval<0.05 & Enrichments_Groups$fold_change>1,]
write.csv(Enrichments_Groups,file="Enrichment_Groups.csv")
write.table(Enrichments_Groups,file="Enrichment_Groups.txt",sep="\t")
View(UniProtTable_KEGG)
data<-extractMaxQuant("proteinGroups.txt",quantification_type = "iBAQ",cont.rm = T,site.rm = T,rev.rm = T)
IDsdetails<-extractMaxQuantIDs("proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
IDsdetails<-cbind(UniProt_Name=sub(".*\\|","",IDsdetails$protein.ids), IDsdetails)
colnames(data)<- sub("iBAQ.","",colnames(data))
data[,1]<- sub(".*\\|","",data[,1])
metadata<- read.csv(file = "metadata.csv")
colnames(metadata)<-tolower(colnames(metadata))
romics_proteins<- romicsCreateObject(data, metadata,main_factor = "Condition")
romics_proteins<- romicsZeroToMissing(romics_proteins)
romicsPlotMissing(romics_proteins)
romics_proteins_noapc<-romicsSubset(romics_proteins,subset_vector = "A_G1_APC",type = "drop",by = "level",factor = "Condition")
romics_proteins<-romicsFilterMissing(romics_proteins,percentage_completeness = 60)
print(paste0(nrow(romics_proteins$data),"/", nrow(romics_proteins$original_data)," proteins remained after filtering", " (",round(nrow(romics_proteins$data)/nrow(romics_proteins$original_data)*100,2),"%)."))
romicsPlotMissing(romics_proteins)
View(metadata)
romics_proteins<- romicsSubset(romics_proteins,subset_vector = 1,type = "drop",by = "level", factor = "Replicate")
romics_proteins<- romicsSubset(romics_proteins,subset_vector = "1",type = "drop",by = "level", factor = "Replicate")
romicsPlotMissing(romics_proteins)
romics_proteins<- romicsSubset(romics_proteins,subset_vector = "1",type = "drop",by = "level", factor = "Replicate")
romicsPlotMissing(romics_proteins)
romics_proteins<-romicsFilterMissing(romics_proteins,percentage_completeness = 60)
print(paste0(nrow(romics_proteins$data),"/", nrow(romics_proteins$original_data)," proteins remained after filtering", " (",round(nrow(romics_proteins$data)/nrow(romics_proteins$original_data)*100,2),"%)."))
romicsPlotMissing(romics_proteins)
romics_proteins<-log2transform(romics_proteins)
distribBoxplot(romics_proteins)
romics_proteins<-medianCenterSample(romics_proteins)
distribBoxplot(romics_proteins)
indPCAplot(romics_proteins, ncp=5,plotType = "percentage")
indPCAplot(romics_proteins, ncp=5,plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_proteins, ncp=5, plotType = "individual",Xcomp=2,Ycomp =3)
imputeMissingEval(romics_proteins,nb_stdev = 2,width_stdev = 0.5, bin=1)
romics_proteins<-imputeMissing(romics_proteins,nb_stdev = 2,width_stdev = 0.5)
romicsHclust(romics_proteins)
indPCAplot(romics_proteins, plotType = "percentage")
indPCAplot(romics_proteins, plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_proteins,  plotType = "individual",Xcomp=2,Ycomp =3)
romics_proteins<-romicsMean(romics_proteins)
romics_proteins<-romicsSd(romics_proteins)
romics_proteins<-romicsANOVA(romics_proteins)
print(paste0(sum(romics_proteins$statistics$ANOVA_p<0.05), " proteins had an ANOVA p<0.05."))
print(paste0(sum(romics_proteins$statistics$ANOVA_padj<0.05), " proteins had an ANOVA padjusted<0.05."))
romics_proteins<-romicsMean(romics_proteins)
romics_proteins<-romicsSd(romics_proteins)
romics_proteins<-romicsANOVA(romics_proteins)
print(paste0(sum(romics_proteins$statistics$ANOVA_p<0.05), " proteins had an ANOVA p<0.05."))
print(paste0(sum(romics_proteins$statistics$ANOVA_padj<0.05), " proteins had an ANOVA padjusted<0.05."))
romicsHeatmap(romics_proteins,variable_hclust_number = 5,ANOVA_filter = "p", p=0.05,sample_hclust = F)
romics_proteins<-romicsVariableHclust(romics_proteins,clusters = 5,ANOVA_filter = "p",p= 0.05,plot = F)
romics_proteins<-romicsZscores(romics_proteins)
romics_proteins<-romicsVariableHclust(romics_proteins,clusters = 2,ANOVA_filter = "p",p= 0.05,plot = F)
romics_proteins<-romicsTtest(romics_proteins)
romicsVolcano(romics_proteins)
export_stats<-romicsExportData(romics_proteins,statistics = T,missing_data = T)
export_stats<-cbind(UniProt_Name=rownames(export_stats),export_stats)
export_stats<-merge(export_stats,IDsdetails,by="UniProt_Name")
write.csv(export_stats,file= "all_results_with_stats.csv")
lower<-rownames(romics_proteins$statistics[romics_proteins$statistics$ANOVA_p<0.05 & romics_proteins$statistics$`log(Pre_soil/Post_soil)`<-0.6])
romics_proteins$statistics$ANOVA_p<0.05
romics_proteins$statistics$`log(Pre_soil/Post_soil)`
lower<-rownames(romics_proteins$statistics[romics_proteins$statistics$ANOVA_p<0.05 & romics_proteins$statistics$`log(Pre_soil/Post_soil)`< (-0.6)])
lower<-rownames(romics_proteins$statistics[romics_proteins$statistics$ANOVA_p<0.05 & romics_proteins$statistics$`log(Pre_soil/Post_soil)` <  (-0.6)])
romics_proteins$statistics$`log(Pre_soil/Post_soil)` <  (-0.6)
lower<-rownames(romics_proteins$statistics)[romics_proteins$statistics$ANOVA_p<0.05 && romics_proteins$statistics$`log(Pre_soil/Post_soil)` <  (-0.6)]
higher<-rownames(romics_proteins$statistics)[romics_proteins$statistics$ANOVA_p<0.05 && romics_proteins$statistics$`log(Pre_soil/Post_soil)` >  (0.6)]
universe<-rownames(romics_proteins$statistics)
lower
lower<-rownames(romics_proteins$statistics)[romics_proteins$statistics$ANOVA_p<0.05 && romics_proteins$statistics$`log(Pre_soil/Post_soil)` <  (-0.6)]
romics_proteins$statistics$ANOVA_p<0.05 && romics_proteins$statistics$`log(Pre_soil/Post_soil)` <  (-0.6)
romics_proteins$statistics$ANOVA_p<0.05 & romics_proteins$statistics$`log(Pre_soil/Post_soil)` <  (-0.6)
lower<-rownames(romics_proteins$statistics)[romics_proteins$statistics$ANOVA_p<0.05 & romics_proteins$statistics$`log(Pre_soil/Post_soil)` <  (-0.6)]
higher<-rownames(romics_proteins$statistics)[romics_proteins$statistics$ANOVA_p<0.05 & romics_proteins$statistics$`log(Pre_soil/Post_soil)` >  (0.6)]
universe<-rownames(romics_proteins$statistics)
View(lower)
lower<-gsub("\\;.*","",lower)
lower_GO<-UniProt_GO_Fisher(lower,universe)
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("Ecoli_proteome_up000000625_2020_08_16.fasta")){
download_UniProtFasta(proteomeID = "up000000625", reviewed = F, export=T, file="Ecoli_proteome_up000000625_2020_08_16.fasta")
}
UniProtFasta_info<-UniprotFastaParser(file = "Ecoli_proteome_up000000625_2020_08_16.fasta")
if(file.exists("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv")){
UniProtTable<-read.csv("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv")
}else{
download_UniProtTable(proteomeID = "up000000625", reviewed = F)
write.csv(UniProtTable,("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv"),row.names=FALSE)
}
if(file.exists("UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="UniProtTable_KEGG.csv",row.names=FALSE)
}
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/08 - DARPA friends/DARPA_FF_Ecoli/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("Ecoli_proteome_up000000625_2020_08_16.fasta")){
download_UniProtFasta(proteomeID = "up000000625", reviewed = F, export=T, file="Ecoli_proteome_up000000625_2020_08_16.fasta")
}
UniProtFasta_info<-UniprotFastaParser(file = "Ecoli_proteome_up000000625_2020_08_16.fasta")
if(file.exists("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv")){
UniProtTable<-read.csv("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv")
}else{
download_UniProtTable(proteomeID = "up000000625", reviewed = F)
write.csv(UniProtTable,("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv"),row.names=FALSE)
}
if(file.exists("UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="UniProtTable_KEGG.csv",row.names=FALSE)
}
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/08 - DARPA friends/DARPA_FF_Ecoli/")
library("RomicsProcessor")
library("proteinminion")
library("DT") #for the rendering of the enrichment tables
if(!file.exists("Ecoli_proteome_up000000625_2020_08_16.fasta")){
download_UniProtFasta(proteomeID = "up000000625", reviewed = F, export=T, file="Ecoli_proteome_up000000625_2020_08_16.fasta")
}
UniProtFasta_info<-UniprotFastaParser(file = "Ecoli_proteome_up000000625_2020_08_16.fasta")
if(file.exists("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv")){
UniProtTable<-read.csv("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv")
}else{
download_UniProtTable(proteomeID = "up000000625", reviewed = F)
write.csv(UniProtTable,("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv"),row.names=FALSE)
}
if(file.exists("UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="UniProtTable_KEGG.csv",row.names=FALSE)
}
View(UniProtTable_GO)
View(UniProtTable)
if(file.exists("UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="UniProtTable_KEGG.csv",row.names=FALSE)
}
if(file.exists("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv")){
UniProtTable<-read.csv("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv")
}else{
download_UniProtTable(proteomeID = "up000000625", reviewed = F)
write.csv(UniProtTable,("UniprotTable_Ecoli_proteome_up000000625_2020_08_16.csv"),row.names=FALSE)
}
if(file.exists("UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="UniProtTable_KEGG.csv",row.names=FALSE)
}
data<-extractMaxQuant("proteinGroups.txt",quantification_type = "iBAQ",cont.rm = T,site.rm = T,rev.rm = T)
IDsdetails<-extractMaxQuantIDs("proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
IDsdetails<-cbind(UniProt_Name=sub(".*\\|","",IDsdetails$protein.ids), IDsdetails)
colnames(data)<- sub("iBAQ.","",colnames(data))
data[,1]<- sub(".*\\|","",data[,1])
metadata<- read.csv(file = "metadata.csv")
colnames(metadata)<-tolower(colnames(metadata))
romics_proteins<- romicsCreateObject(data, metadata,main_factor = "Condition")
romics_proteins<- romicsZeroToMissing(romics_proteins)
romicsPlotMissing(romics_proteins)
romics_proteins<- romicsSubset(romics_proteins,subset_vector = "1",type = "drop",by = "level", factor = "Replicate")
romicsPlotMissing(romics_proteins)
romics_proteins<-romicsFilterMissing(romics_proteins,percentage_completeness = 60)
print(paste0(nrow(romics_proteins$data),"/", nrow(romics_proteins$original_data)," proteins remained after filtering", " (",round(nrow(romics_proteins$data)/nrow(romics_proteins$original_data)*100,2),"%)."))
romicsPlotMissing(romics_proteins)
romics_proteins<-log2transform(romics_proteins)
distribBoxplot(romics_proteins)
romics_proteins<-medianCenterSample(romics_proteins)
distribBoxplot(romics_proteins)
indPCAplot(romics_proteins, ncp=5,plotType = "percentage")
indPCAplot(romics_proteins, ncp=5,plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_proteins, ncp=5, plotType = "individual",Xcomp=2,Ycomp =3)
imputeMissingEval(romics_proteins,nb_stdev = 2,width_stdev = 0.5, bin=1)
romics_proteins<-imputeMissing(romics_proteins,nb_stdev = 2,width_stdev = 0.5)
romicsHclust(romics_proteins)
indPCAplot(romics_proteins, plotType = "percentage")
indPCAplot(romics_proteins, plotType = "individual",Xcomp=1,Ycomp =2)
indPCAplot(romics_proteins,  plotType = "individual",Xcomp=2,Ycomp =3)
indPCA3D(romics_proteins)
romics_proteins<-romicsMean(romics_proteins)
romics_proteins<-romicsSd(romics_proteins)
romics_proteins<-romicsANOVA(romics_proteins)
print(paste0(sum(romics_proteins$statistics$ANOVA_p<0.05), " proteins had an ANOVA p<0.05."))
print(paste0(sum(romics_proteins$statistics$ANOVA_padj<0.05), " proteins had an ANOVA padjusted<0.05."))
romicsHeatmap(romics_proteins,variable_hclust_number = 2,ANOVA_filter = "p", p=0.05,sample_hclust = F)
romics_proteins<-romicsVariableHclust(romics_proteins,clusters = 2,ANOVA_filter = "p",p= 0.05,plot = F)
romics_proteins<-romicsZscores(romics_proteins)
romics_proteins<-romicsTtest(romics_proteins)
romicsVolcano(romics_proteins,plot_type = "plotly")
lower<-rownames(romics_proteins$statistics)[romics_proteins$statistics$ANOVA_p<0.05 & romics_proteins$statistics$`log(Pre_soil/Post_soil)` <  (-0.6)]
higher<-rownames(romics_proteins$statistics)[romics_proteins$statistics$ANOVA_p<0.05 & romics_proteins$statistics$`log(Pre_soil/Post_soil)` >  (0.6)]
universe<-rownames(romics_proteins$statistics)
lower<-gsub("\\;.*","",lower)
higher<-gsub("\\;.*","",higher)
universe<-gsub("\\;.*","",universe)
print("first the enrichment was made for the proteins lower in Pre vs Post")
lower_GO<-UniProt_GO_Fisher(lower,universe)
lower_KEGG<-UniProt_KEGG_Fisher(lower,universe)
lower<-rbind(lower_GO,lower_KEGG)
lower<-lower[lower]
lower<-rownames(romics_proteins$statistics)[romics_proteins$statistics$ANOVA_p<0.05 & romics_proteins$statistics$`log(Pre_soil/Post_soil)` <  (-0.6)]
higher<-rownames(romics_proteins$statistics)[romics_proteins$statistics$ANOVA_p<0.05 & romics_proteins$statistics$`log(Pre_soil/Post_soil)` >  (0.6)]
changing<-rownames(romics_proteins$statistics)[romics_proteins$statistics$ANOVA_p<0.05 & (romics_proteins$statistics$`log(Pre_soil/Post_soil)` >  (0.6) |romics_proteins$statistics$`log(Pre_soil/Post_soil)` <  (-0.6)) ]
print("Finally for the proteins changing in abundance regardless of the direction")
changing_GO<-UniProt_GO_Fisher(changing,universe)
changing_KEGG<-UniProt_KEGG_Fisher(changing,universe)
changing<-rbind(changing_GO,changing_KEGG)
changing<-changing[changing$pval<0.1 & changing$fold_change>1,]
lower<-rownames(romics_proteins$statistics)[romics_proteins$statistics$ANOVA_p<0.05 & romics_proteins$statistics$`log(Pre_soil/Post_soil)` <  (-0.6)]
higher<-rownames(romics_proteins$statistics)[romics_proteins$statistics$ANOVA_p<0.05 & romics_proteins$statistics$`log(Pre_soil/Post_soil)` >  (0.6)]
changing<-rownames(romics_proteins$statistics)[romics_proteins$statistics$ANOVA_p<0.05 & (romics_proteins$statistics$`log(Pre_soil/Post_soil)` >  (0.6) |romics_proteins$statistics$`log(Pre_soil/Post_soil)` <  (-0.6)) ]
universe<-rownames(romics_proteins$statistics)
lower<-gsub("\\;.*","",lower)
higher<-gsub("\\;.*","",higher)
universe<-gsub("\\;.*","",universe)
print("First, the enrichment was made for the proteins lower in Pre vs Post.")
print(paste0(lenght(lower), "proteins were lower in abundance in Pre vs Post."))
print("First, the enrichment was made for the proteins lower in Pre vs Post.")
print(paste0(length(lower), "proteins were lower in abundance in Pre vs Post."))
lower_GO<-UniProt_GO_Fisher(lower,universe)
lower_KEGG<-UniProt_KEGG_Fisher(lower,universe)
lower<-rbind(lower_GO,lower_KEGG)
lower<-lower[lower$pval<0.1 & lower$fold_change>1,]
datatable(lower)
print("Then, the enrichment was made for the proteins higher in Pre vs Post")
print(paste0(length(higher), "proteins were higher in abundance in Pre vs Post."))
higher_GO<-UniProt_GO_Fisher(higher,universe)
higher_KEGG<-UniProt_KEGG_Fisher(higher,universe)
higher<-rbind(higher_GO,higher_KEGG)
higher<-higher[higher$pval<0.1 & higher$fold_change>1,]
datatable(higher)
print("Finally for the proteins changing in abundance regardless of the direction")
print(paste0(length(changing), "proteins were changing in abundance in Pre vs Post."))
changing_GO<-UniProt_GO_Fisher(changing,universe)
changing_KEGG<-UniProt_KEGG_Fisher(changing,universe)
changing<-rbind(changing_GO,changing_KEGG)
changing<-changing[changing$pval<0.1 & changing$fold_change>1,]
datatable(changing)
write.table(lower,file= "enrichment_lower.txt",sep="\t")
write.table(lower,file= "enrichment_higher.txt",sep="\t")
write.table(lower,file= "enrichment_changing.txt",sep="\t")
View(changing_KEGG)
romicsHclust(romics_proteins)
indPCA3D(romics_proteins)
romicsVolcano(romics_proteins)
View(higher)
View(lower)
View(higher)
write.table(lower,file= "enrichment_lower.txt",sep="\t")
write.table(higher,file= "enrichment_higher.txt",sep="\t")
write.table(changing,file= "enrichment_changing.txt",sep="\t")
