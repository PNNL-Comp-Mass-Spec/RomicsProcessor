}
if(file.exists("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_10_12.csv")){
UniProtTable<-read.csv("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_10_12.csv")
}else{
download_UniProtTable(proteomeID = "UP000005640",reviewed = F)
write.csv(UniProtTable,("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_10_12.csv"),row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="./03_output_files/UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="./03_output_files/UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="./03_output_files/UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="./03_output_files/UniProtTable_KEGG.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_REACTOME.csv")){
UniProtTable_REACTOME<-read.csv(file="./03_output_files/UniProtTable_REACTOME.csv")
}else{
generate_UniProtTable_REACTOME()
write.csv(UniProtTable_REACTOME,file="./03_output_files/UniProtTable_REACTOME.csv",row.names=FALSE)
}
data_TMT<-extractMaxQuant(file = "./01_source_files/proteinGroups.txt",quantification_type = "TMT")
MaxQuant_IDs<-extractMaxQuantIDs(file = "./01_source_files/proteinGroups.txt")
metadata<-read.csv("01_source_files/metadata.csv")
colnames(metadata)<-gsub("^X","",colnames(metadata))
romics_TMT<-romicsCreateObject(data_TMT,metadata,main_factor = "Disease_status")
View(data_TMT)
rownames(data)
colnames(data)
colnames(data_TMT)
colnames(metadata)
colnames(data)<-colnames(metadata)<-gsub(".bpd","_BPD",colnames(metadata))
colnames(data_TMT)<-colnames(metadata)<-gsub(".bpd","_BPD",colnames(metadata))
romics_TMT<-romicsCreateObject(data_TMT,metadata,main_factor = "Disease_status")
romics_TMT<-romicsCreateObject(data_TMT,metadata,main_factor = "Disease_status")
romics_TMT<-romicsSampleNameFromFactor(romics_TMT,factor = "Sample_name")
romics_TMT<-romicsZeroToMissing(romics_TMT)
romics_TMT<-log2transform(romics_TMT)
distribBoxplot(romics_TMT)
romics_TMT<-romicsSubset(romics_TMT,subset = c("Empty"),type = "drop",by = "level",factor = "Disease_status")
distribBoxplot(romics_TMT)
romics_TMT<-medianNormSample(romics_TMT)
distribBoxplot(romics_TMT)
romicsPlotMissing(romics_TMT)
romics_TMT<-romicsSubset(romics_TMT,subset = c("Empty"),type = "drop",by = "level",factor = "Disease_status")
distribBoxplot(romics_TMT)
romics_TMT<-medianNormSample(romics_TMT)
distribBoxplot(romics_TMT)
romicsPlotMissing(romics_TMT)
View(MaxQuant_IDs)
rownames(data_TMT)
data_TMT[,1]
data_TMT[,1]<-gsub("","",data_TMT[,1])
romicsPlotMissing(romics_TMT)
romics_TMT<-romicsFilterMissing(romics_TMT,percentage_completeness = 70,main_factor = "main")
romicsPlotMissing(romics_TMT)
imputeMissingEval(romics_TMT)
imputeMissingEval(romics)
imputeMissingEval(romics_TMT)
imputeMissingEval(romics_TMT)
imputeMissingEval(romics_TMT)
imputeMissing(romics_TMT)
imputeMissingEval(romics_TMT)
romics_TMT<-imputeMissing(romics_TMT)
romicsHclust(romics_TMT)
#PCA plot prior batch effect correction
pca_results<-romicsPCA(romics_TMT)
indPCAplot(romics_TMT,plotType = "individual",label = T)
indPCAplot(romics_TMT,plotType = "individual",label = T,Xcomp = 2,Ycomp = 3, ncp=5)
indPCA3D(romics_TMT)
romics_TMT<-romicsMean(romics_TMT)
romics_TMT<-romicsSd(romics_TMT)
romics_TMT<-romicsZscores(romics_TMT)
romics_TMT<-romicsTtest(romics_TMT)
romics_TMT<-romicsANOVA(romics_TMT)
romics_TMT<-romicsTtest(romics_TMT)
romics_TMT<-romicsANOVA(romics_TMT)
romicsHeatmap(romics_TMT, ANOVA_filter = "p",p=0.05,sample_hclust = F,variable_hclust_number = 2)
pFrequencyPlot(romics_TMT)
romicsHeatmap(romics_TMT, ANOVA_filter = "p",p=0.05,sample_hclust = F,variable_hclust_number = 2)
enrichments_ANOVA<-romicsEnrichement(romics_TMT,cluster_filter = "hclust_clusters")
romics_TMT<-romicsVariableHclust(romics_TMT,clusters = 2,plot=F, ANOVA_filter = "p",p = 0.05)
enrichments_ANOVA<-romicsEnrichement(romics_TMT,cluster_filter = "hclust_clusters")
enrichments_ANOVA<-romicsEnrichement(romics_TMT,cluster_filter = "hclust_clusters")
data_TMT[,1]<-gsub(";.*","",data_TMT[,1])
data_TMT[,1]
data_TMT[,1]<-gsub("sp|","",data_TMT[,1])
data_TMT[,1]
data_TMT<-extractMaxQuant(file = "./01_source_files/proteinGroups.txt",quantification_type = "TMT")
MaxQuant_IDs<-extractMaxQuantIDs(file = "./01_source_files/proteinGroups.txt")
metadata<-read.csv("01_source_files/metadata.csv")
colnames(data_TMT)<-colnames(metadata)<-gsub(".bpd","_BPD",colnames(metadata))
#the ids were modified to only contain a representative UniProt accession number (the rest of the information is stored in the mmaxQuant ID anyhow)
data_TMT[,1]<-gsub(";.*","",data_TMT[,1])
data_TMT[,1]<-gsub("sp\\|","",data_TMT[,1])
data_TMT[,1]
data_TMT[,1]<-gsub("\\|.*","",data_TMT[,1])
data_TMT[,1]
cbind(data_TMT[,1], MaxQuant_IDs
]
cbind(data_TMT[,1], MaxQuant_IDs)
View(cbind(data_TMT[,1], MaxQuant_IDs))
data_TMT<-extractMaxQuant(file = "./01_source_files/proteinGroups.txt",quantification_type = "TMT",cont.rm = T,site.rm = T,rev.rm = T)
MaxQuant_IDs<-extractMaxQuantIDs(file = "./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
metadata<-read.csv("01_source_files/metadata.csv")
colnames(data_TMT)<-colnames(metadata)<-gsub(".bpd","_BPD",colnames(metadata))
#the ids were modified to only contain a representative UniProt accession number (the rest of the information is stored in the mmaxQuant ID anyhow)
data_TMT[,1]<-gsub(";.*","",data_TMT[,1])
data_TMT[,1]<-gsub("sp\\|","",data_TMT[,1])
data_TMT[,1]<-gsub("\\|.*","",data_TMT[,1])
View(cbind(data_TMT[,1], MaxQuant_IDs))
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/05 - Lungmap/11 - BPD Rochester/02_Lmap_BPD_TMT_MaxQuant_Oct_2022/")
library(RomicsProcessor)
library(proteinminion)
library(DT)
if(!file.exists("./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_10_12.fasta")){
download_UniProtFasta(proteomeID = "UP000005640",reviewed = F,export = TRUE, file="./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_10_12.fasta")
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_10_12.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
}
if(file.exists("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_10_12.csv")){
UniProtTable<-read.csv("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_10_12.csv")
}else{
download_UniProtTable(proteomeID = "UP000005640",reviewed = F)
write.csv(UniProtTable,("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_10_12.csv"),row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="./03_output_files/UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="./03_output_files/UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="./03_output_files/UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="./03_output_files/UniProtTable_KEGG.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_REACTOME.csv")){
UniProtTable_REACTOME<-read.csv(file="./03_output_files/UniProtTable_REACTOME.csv")
}else{
generate_UniProtTable_REACTOME()
write.csv(UniProtTable_REACTOME,file="./03_output_files/UniProtTable_REACTOME.csv",row.names=FALSE)
}
data_TMT<-extractMaxQuant(file = "./01_source_files/proteinGroups.txt",quantification_type = "TMT",cont.rm = T,site.rm = T,rev.rm = T)
MaxQuant_IDs<-extractMaxQuantIDs(file = "./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
metadata<-read.csv("01_source_files/metadata.csv")
colnames(data_TMT)<-colnames(metadata)<-gsub(".bpd","_BPD",colnames(metadata))
#the ids were modified to only contain a representative UniProt accession number (the rest of the information is stored in the mmaxQuant ID anyhow)
data_TMT[,1]<-gsub(";.*","",data_TMT[,1])
data_TMT[,1]<-gsub("sp\\|","",data_TMT[,1])
data_TMT[,1]<-gsub("\\|.*","",data_TMT[,1])
MaxQuant_IDs<-cbind(representative_ID=data_TMT[,1], MaxQuant_IDs))
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/05 - Lungmap/11 - BPD Rochester/02_Lmap_BPD_TMT_MaxQuant_Oct_2022/")
library(RomicsProcessor)
library(proteinminion)
library(DT)
if(!file.exists("./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_10_12.fasta")){
download_UniProtFasta(proteomeID = "UP000005640",reviewed = F,export = TRUE, file="./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_10_12.fasta")
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_10_12.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
}
if(file.exists("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_10_12.csv")){
UniProtTable<-read.csv("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_10_12.csv")
}else{
download_UniProtTable(proteomeID = "UP000005640",reviewed = F)
write.csv(UniProtTable,("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_10_12.csv"),row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="./03_output_files/UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="./03_output_files/UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="./03_output_files/UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="./03_output_files/UniProtTable_KEGG.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_REACTOME.csv")){
UniProtTable_REACTOME<-read.csv(file="./03_output_files/UniProtTable_REACTOME.csv")
}else{
generate_UniProtTable_REACTOME()
write.csv(UniProtTable_REACTOME,file="./03_output_files/UniProtTable_REACTOME.csv",row.names=FALSE)
}
data_TMT<-extractMaxQuant(file = "./01_source_files/proteinGroups.txt",quantification_type = "TMT",cont.rm = T,site.rm = T,rev.rm = T)
MaxQuant_IDs<-extractMaxQuantIDs(file = "./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
metadata<-read.csv("01_source_files/metadata.csv")
colnames(data_TMT)<-colnames(metadata)<-gsub(".bpd","_BPD",colnames(metadata))
#the ids were modified to only contain a representative UniProt accession number (the rest of the information is stored in the mmaxQuant ID anyhow)
data_TMT[,1]<-gsub(";.*","",data_TMT[,1])
data_TMT[,1]<-gsub("sp\\|","",data_TMT[,1])
data_TMT[,1]<-gsub("\\|.*","",data_TMT[,1])
MaxQuant_IDs<-cbind(representative_ID=data_TMT[,1], MaxQuant_IDs)
romics_TMT<-romicsCreateObject(data_TMT,metadata,main_factor = "Disease_status")
romics_TMT<-romicsSampleNameFromFactor(romics_TMT,factor = "Sample_name")
romicsPlotMissing(romics_TMT)
romicsHeatmap(romics_TMT, ANOVA_filter = "p",p=0.05,sample_hclust = F,variable_hclust_number = 2)
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/05 - Lungmap/11 - BPD Rochester/02_Lmap_BPD_TMT_MaxQuant_Oct_2022/")
library(RomicsProcessor)
library(proteinminion)
library(DT)
if(!file.exists("./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_10_12.fasta")){
download_UniProtFasta(proteomeID = "UP000005640",reviewed = F,export = TRUE, file="./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_10_12.fasta")
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_10_12.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
}
if(file.exists("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_10_12.csv")){
UniProtTable<-read.csv("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_10_12.csv")
}else{
download_UniProtTable(proteomeID = "UP000005640",reviewed = F)
write.csv(UniProtTable,("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_10_12.csv"),row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="./03_output_files/UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="./03_output_files/UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="./03_output_files/UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="./03_output_files/UniProtTable_KEGG.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_REACTOME.csv")){
UniProtTable_REACTOME<-read.csv(file="./03_output_files/UniProtTable_REACTOME.csv")
}else{
generate_UniProtTable_REACTOME()
write.csv(UniProtTable_REACTOME,file="./03_output_files/UniProtTable_REACTOME.csv",row.names=FALSE)
}
data_TMT<-extractMaxQuant(file = "./01_source_files/proteinGroups.txt",quantification_type = "TMT",cont.rm = T,site.rm = T,rev.rm = T)
MaxQuant_IDs<-extractMaxQuantIDs(file = "./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
metadata<-read.csv("01_source_files/metadata.csv")
colnames(data_TMT)<-colnames(metadata)<-gsub(".bpd","_BPD",colnames(metadata))
#the ids were modified to only contain a representative UniProt accession number (the rest of the information is stored in the mmaxQuant ID anyhow)
data_TMT[,1]<-gsub(";.*","",data_TMT[,1])
data_TMT[,1]<-gsub("sp\\|","",data_TMT[,1])
data_TMT[,1]<-gsub("\\|.*","",data_TMT[,1])
MaxQuant_IDs<-cbind(representative_ID=data_TMT[,1], MaxQuant_IDs)
romics_TMT<-romicsCreateObject(data_TMT,metadata,main_factor = "Disease_status")
romics_TMT<-romicsSampleNameFromFactor(romics_TMT,factor = "Sample_name")
romicsPlotMissing(romics_TMT)
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
setwd("~/Documents/05 - Lungmap/11 - BPD Rochester/02_Lmap_BPD_TMT_MaxQuant_Oct_2022/")
library(RomicsProcessor)
library(proteinminion)
library(DT)
if(!file.exists("./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_10_12.fasta")){
download_UniProtFasta(proteomeID = "UP000005640",reviewed = F,export = TRUE, file="./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_10_12.fasta")
UniProtFasta_info<-UniprotFastaParser(file = "./03_output_files/Uniprot_Homo_sapiens_proteome_UP000005640_2022_10_12.fasta")
write.csv(UniProtFasta_info, "./03_output_files/UniProtFasta_info.csv")
}
if(file.exists("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_10_12.csv")){
UniProtTable<-read.csv("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_10_12.csv")
}else{
download_UniProtTable(proteomeID = "UP000005640",reviewed = F)
write.csv(UniProtTable,("./03_output_files/UniprotTable_Homo_sapiens_proteome_UP000005640_2022_10_12.csv"),row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_GO.csv")){
UniProtTable_GO<-read.csv(file="./03_output_files/UniProtTable_GO.csv")
}else{
generate_UniProtTable_GO()
write.csv(UniProtTable_GO,file="./03_output_files/UniProtTable_GO.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_KEGG.csv")){
UniProtTable_KEGG<-read.csv(file="./03_output_files/UniProtTable_KEGG.csv")
}else{
generate_UniProtTable_KEGG()
write.csv(UniProtTable_KEGG,file="./03_output_files/UniProtTable_KEGG.csv",row.names=FALSE)
}
if(file.exists("./03_output_files/UniProtTable_REACTOME.csv")){
UniProtTable_REACTOME<-read.csv(file="./03_output_files/UniProtTable_REACTOME.csv")
}else{
generate_UniProtTable_REACTOME()
write.csv(UniProtTable_REACTOME,file="./03_output_files/UniProtTable_REACTOME.csv",row.names=FALSE)
}
data_TMT<-extractMaxQuant(file = "./01_source_files/proteinGroups.txt",quantification_type = "TMT",cont.rm = T,site.rm = T,rev.rm = T)
MaxQuant_IDs<-extractMaxQuantIDs(file = "./01_source_files/proteinGroups.txt",cont.rm = T,site.rm = T,rev.rm = T)
metadata<-read.csv("01_source_files/metadata.csv")
colnames(data_TMT)<-colnames(metadata)<-gsub(".bpd","_BPD",colnames(metadata))
#the ids were modified to only contain a representative UniProt accession number (the rest of the information is stored in the mmaxQuant ID anyhow)
data_TMT[,1]<-gsub(";.*","",data_TMT[,1])
data_TMT[,1]<-gsub("sp\\|","",data_TMT[,1])
data_TMT[,1]<-gsub("\\|.*","",data_TMT[,1])
MaxQuant_IDs<-cbind(representative_ID=data_TMT[,1], MaxQuant_IDs)
romics_TMT<-romicsCreateObject(data_TMT,metadata,main_factor = "Disease_status")
romics_TMT<-romicsSampleNameFromFactor(romics_TMT,factor = "Sample_name")
romics_TMT<-romicsZeroToMissing(romics_TMT)
romicsPlotMissing(romics_TMT)
romics_TMT<-log2transform(romics_TMT)
distribBoxplot(romics_TMT)
romics_TMT<-romicsSubset(romics_TMT,subset = c("Empty"),type = "drop",by = "level",factor = "Disease_status")
distribBoxplot(romics_TMT)
romics_TMT<-medianNormSample(romics_TMT)
distribBoxplot(romics_TMT)
romics_TMT<-romicsFilterMissing(romics_TMT,percentage_completeness = 70,main_factor = "main")
romicsPlotMissing(romics_TMT)
imputeMissingEval(romics_TMT)
romics_TMT<-imputeMissing(romics_TMT)
romicsHclust(romics_TMT)
#PCA plot prior batch effect correction
pca_results<-romicsPCA(romics_TMT)
indPCAplot(romics_TMT,plotType = "individual",label = T)
indPCAplot(romics_TMT,plotType = "individual",label = T,Xcomp = 2,Ycomp = 3, ncp=5)
indPCA3D(romics_TMT)
romics_TMT<-romicsMean(romics_TMT)
romics_TMT<-romicsSd(romics_TMT)
romics_TMT<-romicsZscores(romics_TMT)
romics_TMT<-romicsTtest(romics_TMT)
romics_TMT<-romicsANOVA(romics_TMT)
pFrequencyPlot(romics_TMT)
romicsHeatmap(romics_TMT, ANOVA_filter = "p",p=0.05,sample_hclust = F,variable_hclust_number = 2)
romics_TMT<-romicsVariableHclust(romics_TMT,clusters = 2,plot=F, ANOVA_filter = "p",p = 0.05)
enrichments_ANOVA<-romicsEnrichement(romics_TMT,cluster_filter = "hclust_clusters")
enrichments_ANOVA_filtered<-enrichments_ANOVA[enrichments_ANOVA$pval<0.1&enrichments_ANOVA$fold_change>1,]
datatable(enrichments_ANOVA)
write.table(enrichments_ANOVA_filtered,file = "03_output_files/enrichments_ANOVA_filtered.txt",row.names = F,sep="\t")
romicsVolcano(romics_TMT,min_fold_change = 0)
romicsCalculatedStats(romics_TMT)
up_severe_vs_ctrl<-enrfilter(romicsEnrichement(romics_proteins,statCol_filter = "Severe_vs_ctrl_Ttest_p" ,statCol_text = "<0.05",statCol_filter2 = "log(Severe/ctrl)",statCol_text2 = ">0",enrichment_function = "EASE",type = c("GO", "KEGG", "REACTOME") ),pval = 0.05,foldchange = 1,min_feature = 2)
up_severe_vs_ctrl<-enrfilter(romicsEnrichement(romics_TMT,statCol_filter = "Severe_vs_ctrl_Ttest_p" ,statCol_text = "<0.05",statCol_filter2 = "log(Severe/ctrl)",statCol_text2 = ">0",enrichment_function = "EASE",type = c("GO", "KEGG", "REACTOME") ),pval = 0.05,foldchange = 1,min_feature = 2)
down_severe_vs_ctrl<-enrfilter(romicsEnrichement(romics_TMT,statCol_filter = "Severe_vs_ctrl_Ttest_p" ,statCol_text = "<0.05",statCol_filter2 = "log(Severe/ctrl)",statCol_text2 = "<0",enrichment_function = "EASE",type = c("GO", "KEGG", "REACTOME") ),pval = 0.05,foldchange = 1,min_feature = 2)
down_severe_vs_ctrl<-enrfilter(romicsEnrichement(romics_TMT,statCol_filter = "Severe_vs_ctrl_Ttest_p" ,statCol_text = "<0.05",statCol_filter2 = "log(Severe/ctrl)",statCol_text2 = "<0",enrichment_function = "EASE",type = c("GO", "KEGG", "REACTOME") ),pval = 0.05,foldchange = 1,min_feature = 2)
up_severe_vs_recovered<-enrfilter(romicsEnrichement(romics_TMT,statCol_filter = "Severe_vs_recovered_Ttest_p" ,statCol_text = "<0.05",statCol_filter2 = "log(Severe/recovered)",statCol_text2 = ">0",enrichment_function = "EASE",type = c("GO", "KEGG", "REACTOME") ),pval = 0.05,foldchange = 1,min_feature = 2)
down_severe_vs_recovered<-enrfilter(romicsEnrichement(romics_TMT,statCol_filter = "Severe_vs_recovered_Ttest_p" ,statCol_text = "<0.05",statCol_filter2 = "log(Severe/recovered)",statCol_text2 = "<0",enrichment_function = "EASE",type = c("GO", "KEGG", "REACTOME") ),pval = 0.05,foldchange = 1,min_feature = 2)
up_recovered_vs_ctrl<-enrfilter(romicsEnrichement(romics_TMT,statCol_filter = "recovered_vs_ctrl_Ttest_p"  ,statCol_text = "<0.05",statCol_filter2 = "log(recovered/ctrl)" ,statCol_text2 = ">0",enrichment_function = "EASE",type = c("GO", "KEGG", "REACTOME") ),pval = 0.05,foldchange = 1,min_feature = 2)
down_recovered_vs_ctrl<-enrfilter(romicsEnrichement(romics_TMT,statCol_filter = "recovered_vs_ctrl_Ttest_p"  ,statCol_text = "<0.05",statCol_filter2 = "log(recovered/ctrl)" ,statCol_text2 = "<0",enrichment_function = "EASE",type = c("GO", "KEGG", "REACTOME") ),pval = 0.05,foldchange = 1,min_feature = 2)
enrplot(up_severe_vs_ctrl[up_severe_vs_ctrl$Category=="GO_BP",])+ggtitle(label = "Up_severe_vs_ctrl GO_BP")
down_severe_vs_ctrl<-enrfilter(romicsEnrichement(romics_TMT,statCol_filter = "Severe_vs_ctrl_Ttest_p" ,statCol_text = "<0.05",statCol_filter2 = "log(Severe/ctrl)",statCol_text2 = "<0",enrichment_function = "EASE",type = c("GO", "KEGG", "REACTOME") ),pval = 0.05,foldchange = 1,min_feature = 2)
enrplot(up_severe_vs_ctrl[up_severe_vs_ctrl$Category=="GO_BP",])+ggtitle(label = "Up_severe_vs_ctrl GO_BP")
enrplot(down_severe_vs_ctrl[down_severe_vs_ctrl$Category=="GO_BP",])+ggtitle(label = "down_severe_vs_ctrl GO_BP")
enrplot(down_severe_vs_ctrl[down_severe_vs_ctrl$Category=="REACTOME_pathway",])+ggtitle(label = "down_severe_vs_ctrl REACTOME")
enrplot(up_severe_vs_ctrl[up_severe_vs_ctrl$Category=="REACTOME_pathway",])+ggtitle(label = "Up_severe_vs_ctrl REACTOME")
enrplot(up_severe_vs_ctrl[up_severe_vs_ctrl$Category=="GO_BP",])+ggtitle(label = "Up_severe_vs_ctrl GO_BP")
enrplot(up_severe_vs_ctrl[up_severe_vs_ctrl$Category=="REACTOME_pathway",])+ggtitle(label = "Up_severe_vs_ctrl REACTOME")
enrplot(down_severe_vs_ctrl[down_severe_vs_ctrl$Category=="GO_BP",])+ggtitle(label = "down_severe_vs_ctrl GO_BP")
enrplot(down_severe_vs_ctrl[down_severe_vs_ctrl$Category=="REACTOME_pathway",])+ggtitle(label = "down_severe_vs_ctrl REACTOME")
enrplot(up_recovered_vs_ctrl[up_recovered_vs_ctrl$Category=="GO_BP",])+ggtitle(label = "up_recovered_vs_ctrl GO_BP")
enrplot(up_recovered_vs_ctrl[up_recovered_vs_ctrl$Category=="REACTOME_pathway",])+ggtitle(label = "up_recovered_vs_ctrl REACTOME")
enrplot(down_recovered_vs_ctrl[down_recovered_vs_ctrl$Category=="GO_BP",])+ggtitle(label = "down_recovered_vs_ctrl GO_BP")
enrplot(down_recovered_vs_ctrl[down_recovered_vs_ctrl$Category=="REACTOME_pathway",])+ggtitle(label = "down_recovered_vs_ctrl REACTOME")
singleVariablePlot(romics_TMT,variable = "P08174",title = "CD55")
singleVariablePlot(romics_TMT,variable = "Q15109",title = "AGER")
singleVariablePlot(romics_TMT,variable = "P62736",title = "ACTA2")
MaxQuant_IDs
View(MaxQuant_IDs)
singleVariablePlot(romics_TMT,variable = "P62736",title = "ACTA2")
singleVariablePlot(romics_TMT,variable = "P08670",title = "Vimentin")
singleVariablePlot(romics_TMT,variable = "Q9UQV4",title = "LAMP3")
singleVariablePlot(romics_TMT,variable = "P11684",title = "Uteroglobin (airway)")
singleVariablePlot(romics_TMT,variable = "P04216",title = "THY1 (Matrix Fibroblast 2)")
singleVariablePlot(romics_TMT,variable ="P02647",title = "APOA1")
singleVariablePlot(romics_TMT,variable ="P06727",title = "APOA4")
singleVariablePlot(romics_TMT,variable ="Q07954",title= "low-density lipoprotein receptor-related protein 1")
singleVariablePlot(romics_TMT,variable = "P02452",title = "Collagen alpha-1(I) chain")
singleVariablePlot(romics_TMT,variable = "P08253",title = "MMP2")
singleVariablePlot(romics_TMT,variable = "P22894",title = "MMP8")
singleVariablePlot(romics_TMT,variable = "P14780",title = "MMP9")
singleVariablePlot(romics_TMT,variable = "P25940",title = "Neutrophil collagenase")
enrplot(up_severe_vs_recovered[up_severe_vs_recovered$Category=="GO_BP",])+ggtitle(label = "up_severe_vs_recovered GO_BP")
enrplot(up_severe_vs_recovered[up_severe_vs_recovered$Category=="REACTOME_pathway",])+ggtitle(label = "up_severe_vs_recovered REACTOME")
up_severe_vs_ctrl<-enrfilter(romicsEnrichement(romics_TMT,statCol_filter = "Severe_vs_ctrl_Ttest_p" ,statCol_text = "<0.1",statCol_filter2 = "log(Severe/ctrl)",statCol_text2 = ">0",enrichment_function = "EASE",type = c("GO", "KEGG", "REACTOME") ),pval = 0.1,foldchange = 1,min_feature = 2)
down_severe_vs_ctrl<-enrfilter(romicsEnrichement(romics_TMT,statCol_filter = "Severe_vs_ctrl_Ttest_p" ,statCol_text = "<0.1",statCol_filter2 = "log(Severe/ctrl)",statCol_text2 = "<0",enrichment_function = "EASE",type = c("GO", "KEGG", "REACTOME") ),pval = 0.1,foldchange = 1,min_feature = 2)
up_severe_vs_recovered<-enrfilter(romicsEnrichement(romics_TMT,statCol_filter = "Severe_vs_recovered_Ttest_p" ,statCol_text = "<0.1",statCol_filter2 = "log(Severe/recovered)",statCol_text2 = ">0",enrichment_function = "EASE",type = c("GO", "KEGG", "REACTOME") ),pval = 0.1,foldchange = 1,min_feature = 2)
down_severe_vs_recovered<-enrfilter(romicsEnrichement(romics_TMT,statCol_filter = "Severe_vs_recovered_Ttest_p" ,statCol_text = "<0.1",statCol_filter2 = "log(Severe/recovered)",statCol_text2 = "<0",enrichment_function = "EASE",type = c("GO", "KEGG", "REACTOME") ),pval = 0.1,foldchange = 1,min_feature = 2)
up_recovered_vs_ctrl<-enrfilter(romicsEnrichement(romics_TMT,statCol_filter = "recovered_vs_ctrl_Ttest_p"  ,statCol_text = "<0.1",statCol_filter2 = "log(recovered/ctrl)" ,statCol_text2 = ">0",enrichment_function = "EASE",type = c("GO", "KEGG", "REACTOME") ),pval = 0.1,foldchange = 1,min_feature = 2)
down_recovered_vs_ctrl<-enrfilter(romicsEnrichement(romics_TMT,statCol_filter = "recovered_vs_ctrl_Ttest_p"  ,statCol_text = "<0.1",statCol_filter2 = "log(recovered/ctrl)" ,statCol_text2 = "<0",enrichment_function = "EASE",type = c("GO", "KEGG", "REACTOME") ),pval = 0.1,foldchange = 1,min_feature = 2)
enrplot(up_severe_vs_ctrl[up_severe_vs_ctrl$Category=="GO_BP",])+ggtitle(label = "Up_severe_vs_ctrl GO_BP")
enrplot(up_severe_vs_ctrl[up_severe_vs_ctrl$Category=="REACTOME_pathway",])+ggtitle(label = "Up_severe_vs_ctrl REACTOME")
enrplot(down_severe_vs_ctrl[down_severe_vs_ctrl$Category=="GO_BP",])+ggtitle(label = "down_severe_vs_ctrl GO_BP")
enrplot(down_severe_vs_ctrl[down_severe_vs_ctrl$Category=="REACTOME_pathway",])+ggtitle(label = "down_severe_vs_ctrl REACTOME")
enrplot(up_recovered_vs_ctrl[up_recovered_vs_ctrl$Category=="GO_BP",])+ggtitle(label = "up_recovered_vs_ctrl GO_BP")
enrplot(up_recovered_vs_ctrl[up_recovered_vs_ctrl$Category=="REACTOME_pathway",])+ggtitle(label = "up_recovered_vs_ctrl REACTOME")
enrplot(down_recovered_vs_ctrl[down_recovered_vs_ctrl$Category=="GO_BP",])+ggtitle(label = "down_recovered_vs_ctrl GO_BP")
enrplot(down_recovered_vs_ctrl[down_recovered_vs_ctrl$Category=="REACTOME_pathway",])+ggtitle(label = "down_recovered_vs_ctrl REACTOME")
enrplot(up_severe_vs_recovered[up_severe_vs_recovered$Category=="GO_BP",])+ggtitle(label = "up_severe_vs_recovered GO_BP")
enrplot(up_severe_vs_recovered[up_severe_vs_recovered$Category=="REACTOME_pathway",])+ggtitle(label = "up_severe_vs_recovered REACTOME")
enrplot(down_severe_vs_recovered[down_severe_vs_recovered$Category=="GO_BP",])+ggtitle(label = "down_severe_vs_recovered GO_BP")
enrplot(down_severe_vs_recovered[down_severe_vs_recovered$Category=="REACTOME_pathway",])+ggtitle(label = "down_severe_vs_recovered REACTOME")
enrichments_ttest<- rbind(up_severe_vs_ctrl,down_severe_vs_ctrl,up_severe_vs_recovered,down_severe_vs_recovered,up_recovered_vs_ctrl,down_recovered_vs_ctrl)
DT::datatable(enrichments_ttest)
write.csv(enrichments_ttest,file="03_output_files/Enrichment_Ttests.csv",row.names = F)
extractIDs("30198,"GO")
extractIDs(term = "30198","GO")
romicsCalculatedStats(romics_TMT)
print("extracellular matrix organization Severe vs ctrl")
romicsHeatmap(featureSubset(romics_TMT,feature_list = extractIDs(term = "30198",term_type = "GO")),labRow = T,RowSideColor = "Severe_vs_ctrl_Ttest_p" )
?heatmap.2()
romicsHeatmap(featureSubset(romics_TMT,feature_list = extractIDs(term = "30198",term_type = "GO")),labRow = T,RowSideColor = "Severe_vs_ctrl_Ttest_p",colv=F)
romicsHeatmap(featureSubset(romics_TMT,feature_list = extractIDs(term = "30198",term_type = "GO")),labRow = T,RowSideColor = "Severe_vs_ctrl_Ttest_p",colv=NULL)
romicsHeatmap(featureSubset(romics_TMT,feature_list = extractIDs(term = "30198",term_type = "GO")),labRow = T,RowSideColor = "Severe_vs_ctrl_Ttest_p",colv="none")
?romicsHeatmap()
d<-featureSubset(romics_TMT,feature_list = extractIDs(term = "30198",term_type = "GO")
d<-featureSubset(romics_TMT,feature_list = extractIDs(term = "30198",term_type = "GO"))
d<-featureSubset(romics_TMT,feature_list = extractIDs(term = "30198",term_type = "GO"))
romicsHeatmap(d,labRow = T,RowSideColor = "Severe_vs_ctrl_Ttest_p",labRow=rownames(d$data))
romicsHeatmap(d,labRow = T,RowSideColor = "Severe_vs_ctrl_Ttest_p",labRow=T)
romicsHeatmap(d,RowSideColor = "Severe_vs_ctrl_Ttest_p",labRow=rownames(d$data))
romicsHeatmap(d,RowSideColor = "Severe_vs_ctrl_Ttest_p",labRow=rownames(d$data))
romicsHeatmap(d,sample_hclust = F, RowSideColor = "Severe_vs_ctrl_Ttest_p",labRow=rownames(d$data))
test<-read.csv(file = "01_source_files/MatrisomeDB_naba_2016_matrix_biology_human_uniprot.csv")
test
read.csv(file = "01_source_files/MatrisomeDB_naba_2016_matrix_biology_human_uniprot.csv")
d<-featureSubset(romics_TMT,read.csv(file = "01_source_files/MatrisomeDB_naba_2016_matrix_biology_human_uniprot.csv"))
d<-featureSubset(romics_TMT,t(read.csv(file = "01_source_files/MatrisomeDB_naba_2016_matrix_biology_human_uniprot.csv")))
romicsHeatmap(d,RowSideColor = "Severe_vs_ctrl_Ttest_p",labRow=rownames(d$data))
romicsHeatmap(d,labRow = rownames(d$data),RowSideColor = "Severe_vs_ctrl_Ttest_p")
romicsHeatmap(d,RowSideColor = "Severe_vs_ctrl_Ttest_p",labRow=rownames(d$data),
romicsHeatmap(d,RowSideColor = "Severe_vs_ctrl_Ttest_p",labRow=rownames(d$data),
romicsHeatmap(d,RowSideColor = "Severe_vs_ctrl_Ttest_p",labRow=rownames(d$data),sample_hclust = F)
romicsHeatmap(d,ANOVA_filter = "p",RowSideColor = "Severe_vs_ctrl_Ttest_p",labRow=rownames(d$data),sample_hclust = F)
romicsHeatmap(d,RowSideColor = "Severe_vs_ctrl_Ttest_p",labRow=rownames(d$data),sample_hclust = F)
report<-dataset_report(Dataset = "AgLung",Most_recent_weeks = 3,Instrument = "QEHFX",Username=Username,Password = Password)
knitr::opts_chunk$set(fig.width=10, fig.height=6, echo = TRUE, results = TRUE, warning = FALSE, message=FALSE)
options(repos=structure(c(CRAN="https://mirror.ibcp.fr/pub/CRAN/")))
library(MageR)
library(DT)
{
Username = readline("Username is : ");
Password = readline("Password : ");
}
report<-dataset_report(Dataset = "AgLung",Most_recent_weeks = 3,Instrument = "QEHFX",Username=Username,Password = Password)
if(is.na(report[1,1])){print("The data does not exist yet.")}else{
report_no_comment<-report[report$Comment=="",]
report_Released<-report[report$Rating=="Released",]
report_Unreviewed<-report[report$Rating=="Unreviewed",]
print(paste0(nrow(report)," runs were recorded in the past two weeks"))
print(paste0(nrow(report_no_comment)," runs had no comments"))
print(paste0(nrow(report_Released)," runs were Released"))
print(paste0(nrow(report_Unreviewed)," runs were Unreviewed"))
datatable(report)
}
report<-dataset_report(Dataset = "AgLung",Most_recent_weeks = 6,Instrument = "QEHFX",Username=Username,Password = Password)
if(is.na(report[1,1])){print("The data does not exist yet.")}else{
report_no_comment<-report[report$Comment=="",]
report_Released<-report[report$Rating=="Released",]
report_Unreviewed<-report[report$Rating=="Unreviewed",]
print(paste0(nrow(report)," runs were recorded in the past two weeks"))
print(paste0(nrow(report_no_comment)," runs had no comments"))
print(paste0(nrow(report_Released)," runs were Released"))
print(paste0(nrow(report_Unreviewed)," runs were Unreviewed"))
datatable(report)
}
View(UniProtTable_GO)
report<-dataset_report(Dataset = "Lewis_Bor_NoDTT",Most_recent_weeks = 2,Username=Username,Password = Password)
if(is.na(report[1,1])){print("The data does not exist yet.")}else{
report_no_comment<-report[report$Comment=="",]
report_Released<-report[report$Rating=="Released",]
report_Unreviewed<-report[report$Rating=="Unreviewed",]
print(paste0(nrow(report)," runs were recorded in the past two weeks"))
print(paste0(nrow(report_no_comment)," runs had no comments"))
print(paste0(nrow(report_Released)," runs were Released"))
print(paste0(nrow(report_Unreviewed)," runs were Unreviewed"))
datatable(report)
}
report<-dataset_report(Dataset = "Lewis_Bor_NoDTT",Most_recent_weeks = 2,Username=Username,Password = Password)
if(is.na(report[1,1])){print("The data does not exist yet.")}else{
report_no_comment<-report[report$Comment=="",]
report_Released<-report[report$Rating=="Released",]
report_Unreviewed<-report[report$Rating=="Unreviewed",]
print(paste0(nrow(report)," runs were recorded in the past two weeks"))
print(paste0(nrow(report_no_comment)," runs had no comments"))
print(paste0(nrow(report_Released)," runs were Released"))
print(paste0(nrow(report_Unreviewed)," runs were Unreviewed"))
datatable(report)
}
report<-dataset_report(Dataset = "LMap_UNC_",Most_recent_weeks = 2,Instrument = "QEHFX",Username=Username,Password = Password)
if(is.na(report[1,1])){print("The data does not exist yet.")}else{
report_no_comment<-report[report$Comment=="",]
report_Released<-report[report$Rating=="Released",]
report_Unreviewed<-report[report$Rating=="Unreviewed",]
print(paste0(nrow(report)," runs were recorded in the past two weeks"))
print(paste0(nrow(report_no_comment)," runs had no comments"))
print(paste0(nrow(report_Released)," runs were Released"))
print(paste0(nrow(report_Unreviewed)," runs were Unreviewed"))
datatable(report)
}
report<-dataset_report(Dataset = "LMap_UNC_",Most_recent_weeks = 2,Instrument = "VelosOrbi",Username=Username,Password = Password)
if(is.na(report[1,1])){print("The data does not exist yet.")}else{
report_no_comment<-report[report$Comment=="",]
report_Released<-report[report$Rating=="Released",]
report_Unreviewed<-report[report$Rating=="Unreviewed",]
print(paste0(nrow(report)," runs were recorded in the past two weeks"))
print(paste0(nrow(report_no_comment)," runs had no comments"))
print(paste0(nrow(report_Released)," runs were Released"))
print(paste0(nrow(report_Unreviewed)," runs were Unreviewed"))
datatable(report)
}
report<-dataset_report(Dataset = "LMap_LCM_BPD_",Most_recent_weeks = 2,Instrument = "QEHFX",Username=Username,Password = Password)
if(is.na(report[1,1])){print("The data does not exist yet.")}else{
report_no_comment<-report[report$Comment=="",]
report_Released<-report[report$Rating=="Released",]
report_Unreviewed<-report[report$Rating=="Unreviewed",]
print(paste0(nrow(report)," runs were recorded in the past two weeks"))
print(paste0(nrow(report_no_comment)," runs had no comments"))
print(paste0(nrow(report_Released)," runs were Released"))
print(paste0(nrow(report_Unreviewed)," runs were Unreviewed"))
datatable(report)
}
